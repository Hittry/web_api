
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 */

export type User = {
  id: number
  email: string
  firstName: string | null
  lastName: string | null
  isAdmin: boolean
}

/**
 * Model Token
 */

export type Token = {
  id: number
  createdAt: Date
  updatedAt: Date
  type_token: TokenType
  emailToken: string | null
  valid: boolean
  expiration: Date
  userId: number
}

/**
 * Model DianonPerson
 */

export type DianonPerson = {
  id: number
  email: string | null
  firstName: string
  lastName: string
  social: Prisma.JsonValue | null
}

/**
 * Model Organization
 */

export type Organization = {
  id: number
  personID: number
  name: string
  rank: string | null
  date: Date | null
  firstName: string | null
  lastName: string | null
}

/**
 * Model DistinctiveFeatures
 */

export type DistinctiveFeatures = {
  id: number
  personId: number
  tato: string | null
  colour: string | null
  sex: string
  injury: string | null
}

/**
 * Model PersonalInfo
 */

export type PersonalInfo = {
  id: number
  personId: number
  passport: string | null
  marital: string | null
  children: string | null
  adress: string | null
  register: string | null
  telephone: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const TokenType: {
  EMAIL: 'EMAIL',
  API: 'API'
};

export type TokenType = (typeof TokenType)[keyof typeof TokenType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<GlobalReject>;

  /**
   * `prisma.dianonPerson`: Exposes CRUD operations for the **DianonPerson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DianonPeople
    * const dianonPeople = await prisma.dianonPerson.findMany()
    * ```
    */
  get dianonPerson(): Prisma.DianonPersonDelegate<GlobalReject>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<GlobalReject>;

  /**
   * `prisma.distinctiveFeatures`: Exposes CRUD operations for the **DistinctiveFeatures** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DistinctiveFeatures
    * const distinctiveFeatures = await prisma.distinctiveFeatures.findMany()
    * ```
    */
  get distinctiveFeatures(): Prisma.DistinctiveFeaturesDelegate<GlobalReject>;

  /**
   * `prisma.personalInfo`: Exposes CRUD operations for the **PersonalInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PersonalInfos
    * const personalInfos = await prisma.personalInfo.findMany()
    * ```
    */
  get personalInfo(): Prisma.PersonalInfoDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.23.0
   * Query Engine version: 60cc71d884972ab4e897f0277c4b84383dddaf6c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Token: 'Token',
    DianonPerson: 'DianonPerson',
    Organization: 'Organization',
    DistinctiveFeatures: 'DistinctiveFeatures',
    PersonalInfo: 'PersonalInfo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    firstName: string | null
    lastName: string | null
    isAdmin: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    firstName: string | null
    lastName: string | null
    isAdmin: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    isAdmin: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    isAdmin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    isAdmin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    isAdmin?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    firstName: string | null
    lastName: string | null
    isAdmin: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    isAdmin?: boolean
    tokens?: boolean | TokenFindManyArgs
  }

  export type UserInclude = {
    tokens?: boolean | TokenFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'tokens'
        ? Array < TokenGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'tokens'
        ? Array < TokenGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tokens<T extends TokenFindManyArgs = {}>(args?: Subset<T, TokenFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Token>>, PrismaPromise<Array<TokenGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Token
   */


  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
    max: TokenMaxAggregateOutputType | null
  }

  export type TokenAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TokenSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TokenMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    type_token: TokenType | null
    emailToken: string | null
    valid: boolean | null
    expiration: Date | null
    userId: number | null
  }

  export type TokenMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    type_token: TokenType | null
    emailToken: string | null
    valid: boolean | null
    expiration: Date | null
    userId: number | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    type_token: number
    emailToken: number
    valid: number
    expiration: number
    userId: number
    _all: number
  }


  export type TokenAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TokenSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TokenMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    type_token?: true
    emailToken?: true
    valid?: true
    expiration?: true
    userId?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    type_token?: true
    emailToken?: true
    valid?: true
    expiration?: true
    userId?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    type_token?: true
    emailToken?: true
    valid?: true
    expiration?: true
    userId?: true
    _all?: true
  }

  export type TokenAggregateArgs = {
    /**
     * Filter which Token to aggregate.
     * 
    **/
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<TokenOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokenAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: TokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokenSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: TokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }


    
    
  export type TokenGroupByArgs = {
    where?: TokenWhereInput
    orderBy?: Enumerable<TokenOrderByInput>
    by: Array<TokenScalarFieldEnum>
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _avg?: TokenAvgAggregateInputType
    _sum?: TokenSumAggregateInputType
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }


  export type TokenGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    type_token: TokenType
    emailToken: string | null
    valid: boolean
    expiration: Date
    userId: number
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Promise<
    Array<
      PickArray<TokenGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], TokenGroupByOutputType[P]> 
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      > 
    >


  export type TokenSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type_token?: boolean
    emailToken?: boolean
    valid?: boolean
    expiration?: boolean
    userId?: boolean
    user?: boolean | UserArgs
  }

  export type TokenInclude = {
    user?: boolean | UserArgs
  }

  export type TokenGetPayload<
    S extends boolean | null | undefined | TokenArgs,
    U = keyof S
      > = S extends true
        ? Token
    : S extends undefined
    ? never
    : S extends TokenArgs | TokenFindManyArgs
    ?'include' extends U
    ? Token  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Token ?Token [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Token
  : Token


  type TokenCountArgs = Merge<
    Omit<TokenFindManyArgs, 'select' | 'include'> & {
      select?: TokenCountAggregateInputType | true
    }
  >

  export interface TokenDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Token'> extends True ? CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>> : CheckSelect<T, Prisma__TokenClient<Token | null >, Prisma__TokenClient<TokenGetPayload<T> | null >>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Token'> extends True ? CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>> : CheckSelect<T, Prisma__TokenClient<Token | null >, Prisma__TokenClient<TokenGetPayload<T> | null >>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TokenFindManyArgs>(
      args?: SelectSubset<T, TokenFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Token>>, PrismaPromise<Array<TokenGetPayload<T>>>>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
    **/
    create<T extends TokenCreateArgs>(
      args: SelectSubset<T, TokenCreateArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Create many Tokens.
     *     @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     *     @example
     *     // Create many Tokens
     *     const token = await prisma.token.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TokenCreateManyArgs>(
      args?: SelectSubset<T, TokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
    **/
    delete<T extends TokenDeleteArgs>(
      args: SelectSubset<T, TokenDeleteArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TokenUpdateArgs>(
      args: SelectSubset<T, TokenUpdateArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TokenDeleteManyArgs>(
      args?: SelectSubset<T, TokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TokenUpdateManyArgs>(
      args: SelectSubset<T, TokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
    **/
    upsert<T extends TokenUpsertArgs>(
      args: SelectSubset<T, TokenUpsertArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TokenClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Throw an Error if a Token can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Token to fetch.
     * 
    **/
    where: TokenWhereUniqueInput
  }


  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Throw an Error if a Token can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Token to fetch.
     * 
    **/
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<TokenOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     * 
    **/
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     * 
    **/
    distinct?: Enumerable<TokenScalarFieldEnum>
  }


  /**
   * Token findMany
   */
  export type TokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Filter, which Tokens to fetch.
     * 
    **/
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<TokenOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     * 
    **/
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TokenScalarFieldEnum>
  }


  /**
   * Token create
   */
  export type TokenCreateArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * The data needed to create a Token.
     * 
    **/
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }


  /**
   * Token createMany
   */
  export type TokenCreateManyArgs = {
    data: Enumerable<TokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Token update
   */
  export type TokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * The data needed to update a Token.
     * 
    **/
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     * 
    **/
    where: TokenWhereUniqueInput
  }


  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs = {
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    where?: TokenWhereInput
  }


  /**
   * Token upsert
   */
  export type TokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * The filter to search for the Token to update in case it exists.
     * 
    **/
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     * 
    **/
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }


  /**
   * Token delete
   */
  export type TokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Filter which Token to delete.
     * 
    **/
    where: TokenWhereUniqueInput
  }


  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs = {
    where?: TokenWhereInput
  }


  /**
   * Token without action
   */
  export type TokenArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
  }



  /**
   * Model DianonPerson
   */


  export type AggregateDianonPerson = {
    _count: DianonPersonCountAggregateOutputType | null
    count: DianonPersonCountAggregateOutputType | null
    _avg: DianonPersonAvgAggregateOutputType | null
    avg: DianonPersonAvgAggregateOutputType | null
    _sum: DianonPersonSumAggregateOutputType | null
    sum: DianonPersonSumAggregateOutputType | null
    _min: DianonPersonMinAggregateOutputType | null
    min: DianonPersonMinAggregateOutputType | null
    _max: DianonPersonMaxAggregateOutputType | null
    max: DianonPersonMaxAggregateOutputType | null
  }

  export type DianonPersonAvgAggregateOutputType = {
    id: number | null
  }

  export type DianonPersonSumAggregateOutputType = {
    id: number | null
  }

  export type DianonPersonMinAggregateOutputType = {
    id: number | null
    email: string | null
    firstName: string | null
    lastName: string | null
  }

  export type DianonPersonMaxAggregateOutputType = {
    id: number | null
    email: string | null
    firstName: string | null
    lastName: string | null
  }

  export type DianonPersonCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    social: number
    _all: number
  }


  export type DianonPersonAvgAggregateInputType = {
    id?: true
  }

  export type DianonPersonSumAggregateInputType = {
    id?: true
  }

  export type DianonPersonMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
  }

  export type DianonPersonMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
  }

  export type DianonPersonCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    social?: true
    _all?: true
  }

  export type DianonPersonAggregateArgs = {
    /**
     * Filter which DianonPerson to aggregate.
     * 
    **/
    where?: DianonPersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DianonPeople to fetch.
     * 
    **/
    orderBy?: Enumerable<DianonPersonOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DianonPersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DianonPeople from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DianonPeople.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DianonPeople
    **/
    _count?: true | DianonPersonCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | DianonPersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DianonPersonAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: DianonPersonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DianonPersonSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: DianonPersonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DianonPersonMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: DianonPersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DianonPersonMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: DianonPersonMaxAggregateInputType
  }

  export type GetDianonPersonAggregateType<T extends DianonPersonAggregateArgs> = {
        [P in keyof T & keyof AggregateDianonPerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDianonPerson[P]>
      : GetScalarType<T[P], AggregateDianonPerson[P]>
  }


    
    
  export type DianonPersonGroupByArgs = {
    where?: DianonPersonWhereInput
    orderBy?: Enumerable<DianonPersonOrderByInput>
    by: Array<DianonPersonScalarFieldEnum>
    having?: DianonPersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DianonPersonCountAggregateInputType | true
    _avg?: DianonPersonAvgAggregateInputType
    _sum?: DianonPersonSumAggregateInputType
    _min?: DianonPersonMinAggregateInputType
    _max?: DianonPersonMaxAggregateInputType
  }


  export type DianonPersonGroupByOutputType = {
    id: number
    email: string | null
    firstName: string
    lastName: string
    social: JsonValue | null
    _count: DianonPersonCountAggregateOutputType | null
    _avg: DianonPersonAvgAggregateOutputType | null
    _sum: DianonPersonSumAggregateOutputType | null
    _min: DianonPersonMinAggregateOutputType | null
    _max: DianonPersonMaxAggregateOutputType | null
  }

  type GetDianonPersonGroupByPayload<T extends DianonPersonGroupByArgs> = Promise<
    Array<
      PickArray<DianonPersonGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof DianonPersonGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], DianonPersonGroupByOutputType[P]> 
            : GetScalarType<T[P], DianonPersonGroupByOutputType[P]>
        }
      > 
    >


  export type DianonPersonSelect = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    social?: boolean
    distinctiveFeatures?: boolean | DistinctiveFeaturesFindManyArgs
    organization?: boolean | OrganizationFindManyArgs
    personalInfo?: boolean | PersonalInfoFindManyArgs
  }

  export type DianonPersonInclude = {
    distinctiveFeatures?: boolean | DistinctiveFeaturesFindManyArgs
    organization?: boolean | OrganizationFindManyArgs
    personalInfo?: boolean | PersonalInfoFindManyArgs
  }

  export type DianonPersonGetPayload<
    S extends boolean | null | undefined | DianonPersonArgs,
    U = keyof S
      > = S extends true
        ? DianonPerson
    : S extends undefined
    ? never
    : S extends DianonPersonArgs | DianonPersonFindManyArgs
    ?'include' extends U
    ? DianonPerson  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'distinctiveFeatures'
        ? Array < DistinctiveFeaturesGetPayload<S['include'][P]>>  :
        P extends 'organization'
        ? Array < OrganizationGetPayload<S['include'][P]>>  :
        P extends 'personalInfo'
        ? Array < PersonalInfoGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof DianonPerson ?DianonPerson [P]
  : 
          P extends 'distinctiveFeatures'
        ? Array < DistinctiveFeaturesGetPayload<S['select'][P]>>  :
        P extends 'organization'
        ? Array < OrganizationGetPayload<S['select'][P]>>  :
        P extends 'personalInfo'
        ? Array < PersonalInfoGetPayload<S['select'][P]>>  : never
  } 
    : DianonPerson
  : DianonPerson


  type DianonPersonCountArgs = Merge<
    Omit<DianonPersonFindManyArgs, 'select' | 'include'> & {
      select?: DianonPersonCountAggregateInputType | true
    }
  >

  export interface DianonPersonDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DianonPerson that matches the filter.
     * @param {DianonPersonFindUniqueArgs} args - Arguments to find a DianonPerson
     * @example
     * // Get one DianonPerson
     * const dianonPerson = await prisma.dianonPerson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DianonPersonFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DianonPersonFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DianonPerson'> extends True ? CheckSelect<T, Prisma__DianonPersonClient<DianonPerson>, Prisma__DianonPersonClient<DianonPersonGetPayload<T>>> : CheckSelect<T, Prisma__DianonPersonClient<DianonPerson | null >, Prisma__DianonPersonClient<DianonPersonGetPayload<T> | null >>

    /**
     * Find the first DianonPerson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DianonPersonFindFirstArgs} args - Arguments to find a DianonPerson
     * @example
     * // Get one DianonPerson
     * const dianonPerson = await prisma.dianonPerson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DianonPersonFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DianonPersonFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DianonPerson'> extends True ? CheckSelect<T, Prisma__DianonPersonClient<DianonPerson>, Prisma__DianonPersonClient<DianonPersonGetPayload<T>>> : CheckSelect<T, Prisma__DianonPersonClient<DianonPerson | null >, Prisma__DianonPersonClient<DianonPersonGetPayload<T> | null >>

    /**
     * Find zero or more DianonPeople that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DianonPersonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DianonPeople
     * const dianonPeople = await prisma.dianonPerson.findMany()
     * 
     * // Get first 10 DianonPeople
     * const dianonPeople = await prisma.dianonPerson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dianonPersonWithIdOnly = await prisma.dianonPerson.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DianonPersonFindManyArgs>(
      args?: SelectSubset<T, DianonPersonFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DianonPerson>>, PrismaPromise<Array<DianonPersonGetPayload<T>>>>

    /**
     * Create a DianonPerson.
     * @param {DianonPersonCreateArgs} args - Arguments to create a DianonPerson.
     * @example
     * // Create one DianonPerson
     * const DianonPerson = await prisma.dianonPerson.create({
     *   data: {
     *     // ... data to create a DianonPerson
     *   }
     * })
     * 
    **/
    create<T extends DianonPersonCreateArgs>(
      args: SelectSubset<T, DianonPersonCreateArgs>
    ): CheckSelect<T, Prisma__DianonPersonClient<DianonPerson>, Prisma__DianonPersonClient<DianonPersonGetPayload<T>>>

    /**
     * Create many DianonPeople.
     *     @param {DianonPersonCreateManyArgs} args - Arguments to create many DianonPeople.
     *     @example
     *     // Create many DianonPeople
     *     const dianonPerson = await prisma.dianonPerson.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DianonPersonCreateManyArgs>(
      args?: SelectSubset<T, DianonPersonCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DianonPerson.
     * @param {DianonPersonDeleteArgs} args - Arguments to delete one DianonPerson.
     * @example
     * // Delete one DianonPerson
     * const DianonPerson = await prisma.dianonPerson.delete({
     *   where: {
     *     // ... filter to delete one DianonPerson
     *   }
     * })
     * 
    **/
    delete<T extends DianonPersonDeleteArgs>(
      args: SelectSubset<T, DianonPersonDeleteArgs>
    ): CheckSelect<T, Prisma__DianonPersonClient<DianonPerson>, Prisma__DianonPersonClient<DianonPersonGetPayload<T>>>

    /**
     * Update one DianonPerson.
     * @param {DianonPersonUpdateArgs} args - Arguments to update one DianonPerson.
     * @example
     * // Update one DianonPerson
     * const dianonPerson = await prisma.dianonPerson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DianonPersonUpdateArgs>(
      args: SelectSubset<T, DianonPersonUpdateArgs>
    ): CheckSelect<T, Prisma__DianonPersonClient<DianonPerson>, Prisma__DianonPersonClient<DianonPersonGetPayload<T>>>

    /**
     * Delete zero or more DianonPeople.
     * @param {DianonPersonDeleteManyArgs} args - Arguments to filter DianonPeople to delete.
     * @example
     * // Delete a few DianonPeople
     * const { count } = await prisma.dianonPerson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DianonPersonDeleteManyArgs>(
      args?: SelectSubset<T, DianonPersonDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DianonPeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DianonPersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DianonPeople
     * const dianonPerson = await prisma.dianonPerson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DianonPersonUpdateManyArgs>(
      args: SelectSubset<T, DianonPersonUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DianonPerson.
     * @param {DianonPersonUpsertArgs} args - Arguments to update or create a DianonPerson.
     * @example
     * // Update or create a DianonPerson
     * const dianonPerson = await prisma.dianonPerson.upsert({
     *   create: {
     *     // ... data to create a DianonPerson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DianonPerson we want to update
     *   }
     * })
    **/
    upsert<T extends DianonPersonUpsertArgs>(
      args: SelectSubset<T, DianonPersonUpsertArgs>
    ): CheckSelect<T, Prisma__DianonPersonClient<DianonPerson>, Prisma__DianonPersonClient<DianonPersonGetPayload<T>>>

    /**
     * Count the number of DianonPeople.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DianonPersonCountArgs} args - Arguments to filter DianonPeople to count.
     * @example
     * // Count the number of DianonPeople
     * const count = await prisma.dianonPerson.count({
     *   where: {
     *     // ... the filter for the DianonPeople we want to count
     *   }
     * })
    **/
    count<T extends DianonPersonCountArgs>(
      args?: Subset<T, DianonPersonCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DianonPersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DianonPerson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DianonPersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DianonPersonAggregateArgs>(args: Subset<T, DianonPersonAggregateArgs>): PrismaPromise<GetDianonPersonAggregateType<T>>

    /**
     * Group by DianonPerson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DianonPersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DianonPersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DianonPersonGroupByArgs['orderBy'] }
        : { orderBy?: DianonPersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DianonPersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDianonPersonGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for DianonPerson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DianonPersonClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    distinctiveFeatures<T extends DistinctiveFeaturesFindManyArgs = {}>(args?: Subset<T, DistinctiveFeaturesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<DistinctiveFeatures>>, PrismaPromise<Array<DistinctiveFeaturesGetPayload<T>>>>;

    organization<T extends OrganizationFindManyArgs = {}>(args?: Subset<T, OrganizationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Organization>>, PrismaPromise<Array<OrganizationGetPayload<T>>>>;

    personalInfo<T extends PersonalInfoFindManyArgs = {}>(args?: Subset<T, PersonalInfoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PersonalInfo>>, PrismaPromise<Array<PersonalInfoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * DianonPerson findUnique
   */
  export type DianonPersonFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the DianonPerson
     * 
    **/
    select?: DianonPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DianonPersonInclude | null
    /**
     * Throw an Error if a DianonPerson can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DianonPerson to fetch.
     * 
    **/
    where: DianonPersonWhereUniqueInput
  }


  /**
   * DianonPerson findFirst
   */
  export type DianonPersonFindFirstArgs = {
    /**
     * Select specific fields to fetch from the DianonPerson
     * 
    **/
    select?: DianonPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DianonPersonInclude | null
    /**
     * Throw an Error if a DianonPerson can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DianonPerson to fetch.
     * 
    **/
    where?: DianonPersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DianonPeople to fetch.
     * 
    **/
    orderBy?: Enumerable<DianonPersonOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DianonPeople.
     * 
    **/
    cursor?: DianonPersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DianonPeople from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DianonPeople.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DianonPeople.
     * 
    **/
    distinct?: Enumerable<DianonPersonScalarFieldEnum>
  }


  /**
   * DianonPerson findMany
   */
  export type DianonPersonFindManyArgs = {
    /**
     * Select specific fields to fetch from the DianonPerson
     * 
    **/
    select?: DianonPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DianonPersonInclude | null
    /**
     * Filter, which DianonPeople to fetch.
     * 
    **/
    where?: DianonPersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DianonPeople to fetch.
     * 
    **/
    orderBy?: Enumerable<DianonPersonOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DianonPeople.
     * 
    **/
    cursor?: DianonPersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DianonPeople from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DianonPeople.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DianonPersonScalarFieldEnum>
  }


  /**
   * DianonPerson create
   */
  export type DianonPersonCreateArgs = {
    /**
     * Select specific fields to fetch from the DianonPerson
     * 
    **/
    select?: DianonPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DianonPersonInclude | null
    /**
     * The data needed to create a DianonPerson.
     * 
    **/
    data: XOR<DianonPersonCreateInput, DianonPersonUncheckedCreateInput>
  }


  /**
   * DianonPerson createMany
   */
  export type DianonPersonCreateManyArgs = {
    data: Enumerable<DianonPersonCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DianonPerson update
   */
  export type DianonPersonUpdateArgs = {
    /**
     * Select specific fields to fetch from the DianonPerson
     * 
    **/
    select?: DianonPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DianonPersonInclude | null
    /**
     * The data needed to update a DianonPerson.
     * 
    **/
    data: XOR<DianonPersonUpdateInput, DianonPersonUncheckedUpdateInput>
    /**
     * Choose, which DianonPerson to update.
     * 
    **/
    where: DianonPersonWhereUniqueInput
  }


  /**
   * DianonPerson updateMany
   */
  export type DianonPersonUpdateManyArgs = {
    data: XOR<DianonPersonUpdateManyMutationInput, DianonPersonUncheckedUpdateManyInput>
    where?: DianonPersonWhereInput
  }


  /**
   * DianonPerson upsert
   */
  export type DianonPersonUpsertArgs = {
    /**
     * Select specific fields to fetch from the DianonPerson
     * 
    **/
    select?: DianonPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DianonPersonInclude | null
    /**
     * The filter to search for the DianonPerson to update in case it exists.
     * 
    **/
    where: DianonPersonWhereUniqueInput
    /**
     * In case the DianonPerson found by the `where` argument doesn't exist, create a new DianonPerson with this data.
     * 
    **/
    create: XOR<DianonPersonCreateInput, DianonPersonUncheckedCreateInput>
    /**
     * In case the DianonPerson was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DianonPersonUpdateInput, DianonPersonUncheckedUpdateInput>
  }


  /**
   * DianonPerson delete
   */
  export type DianonPersonDeleteArgs = {
    /**
     * Select specific fields to fetch from the DianonPerson
     * 
    **/
    select?: DianonPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DianonPersonInclude | null
    /**
     * Filter which DianonPerson to delete.
     * 
    **/
    where: DianonPersonWhereUniqueInput
  }


  /**
   * DianonPerson deleteMany
   */
  export type DianonPersonDeleteManyArgs = {
    where?: DianonPersonWhereInput
  }


  /**
   * DianonPerson without action
   */
  export type DianonPersonArgs = {
    /**
     * Select specific fields to fetch from the DianonPerson
     * 
    **/
    select?: DianonPersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DianonPersonInclude | null
  }



  /**
   * Model Organization
   */


  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
    max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    id: number | null
    personID: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    id: number | null
    personID: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: number | null
    personID: number | null
    name: string | null
    rank: string | null
    date: Date | null
    firstName: string | null
    lastName: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: number | null
    personID: number | null
    name: string | null
    rank: string | null
    date: Date | null
    firstName: string | null
    lastName: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    personID: number
    name: number
    rank: number
    date: number
    firstName: number
    lastName: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    id?: true
    personID?: true
  }

  export type OrganizationSumAggregateInputType = {
    id?: true
    personID?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    personID?: true
    name?: true
    rank?: true
    date?: true
    firstName?: true
    lastName?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    personID?: true
    name?: true
    rank?: true
    date?: true
    firstName?: true
    lastName?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    personID?: true
    name?: true
    rank?: true
    date?: true
    firstName?: true
    lastName?: true
    _all?: true
  }

  export type OrganizationAggregateArgs = {
    /**
     * Filter which Organization to aggregate.
     * 
    **/
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganizationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }


    
    
  export type OrganizationGroupByArgs = {
    where?: OrganizationWhereInput
    orderBy?: Enumerable<OrganizationOrderByInput>
    by: Array<OrganizationScalarFieldEnum>
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }


  export type OrganizationGroupByOutputType = {
    id: number
    personID: number
    name: string
    rank: string | null
    date: Date | null
    firstName: string | null
    lastName: string | null
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Promise<
    Array<
      PickArray<OrganizationGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]> 
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      > 
    >


  export type OrganizationSelect = {
    id?: boolean
    personID?: boolean
    name?: boolean
    rank?: boolean
    date?: boolean
    firstName?: boolean
    lastName?: boolean
    person?: boolean | DianonPersonArgs
  }

  export type OrganizationInclude = {
    person?: boolean | DianonPersonArgs
  }

  export type OrganizationGetPayload<
    S extends boolean | null | undefined | OrganizationArgs,
    U = keyof S
      > = S extends true
        ? Organization
    : S extends undefined
    ? never
    : S extends OrganizationArgs | OrganizationFindManyArgs
    ?'include' extends U
    ? Organization  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'person'
        ? DianonPersonGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Organization ?Organization [P]
  : 
          P extends 'person'
        ? DianonPersonGetPayload<S['select'][P]> : never
  } 
    : Organization
  : Organization


  type OrganizationCountArgs = Merge<
    Omit<OrganizationFindManyArgs, 'select' | 'include'> & {
      select?: OrganizationCountAggregateInputType | true
    }
  >

  export interface OrganizationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganizationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrganizationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Organization'> extends True ? CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>> : CheckSelect<T, Prisma__OrganizationClient<Organization | null >, Prisma__OrganizationClient<OrganizationGetPayload<T> | null >>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganizationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrganizationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Organization'> extends True ? CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>> : CheckSelect<T, Prisma__OrganizationClient<Organization | null >, Prisma__OrganizationClient<OrganizationGetPayload<T> | null >>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganizationFindManyArgs>(
      args?: SelectSubset<T, OrganizationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Organization>>, PrismaPromise<Array<OrganizationGetPayload<T>>>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
    **/
    create<T extends OrganizationCreateArgs>(
      args: SelectSubset<T, OrganizationCreateArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Create many Organizations.
     *     @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     *     @example
     *     // Create many Organizations
     *     const organization = await prisma.organization.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrganizationCreateManyArgs>(
      args?: SelectSubset<T, OrganizationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
    **/
    delete<T extends OrganizationDeleteArgs>(
      args: SelectSubset<T, OrganizationDeleteArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizationUpdateArgs>(
      args: SelectSubset<T, OrganizationUpdateArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizationDeleteManyArgs>(
      args?: SelectSubset<T, OrganizationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizationUpdateManyArgs>(
      args: SelectSubset<T, OrganizationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizationUpsertArgs>(
      args: SelectSubset<T, OrganizationUpsertArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>

    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrganizationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    person<T extends DianonPersonArgs = {}>(args?: Subset<T, DianonPersonArgs>): CheckSelect<T, Prisma__DianonPersonClient<DianonPerson | null >, Prisma__DianonPersonClient<DianonPersonGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Throw an Error if a Organization can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Organization to fetch.
     * 
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Throw an Error if a Organization can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Organization to fetch.
     * 
    **/
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganizationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     * 
    **/
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     * 
    **/
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Filter, which Organizations to fetch.
     * 
    **/
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganizationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     * 
    **/
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization create
   */
  export type OrganizationCreateArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * The data needed to create a Organization.
     * 
    **/
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }


  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs = {
    data: Enumerable<OrganizationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Organization update
   */
  export type OrganizationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * The data needed to update a Organization.
     * 
    **/
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     * 
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs = {
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    where?: OrganizationWhereInput
  }


  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * The filter to search for the Organization to update in case it exists.
     * 
    **/
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     * 
    **/
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }


  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
    /**
     * Filter which Organization to delete.
     * 
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs = {
    where?: OrganizationWhereInput
  }


  /**
   * Organization without action
   */
  export type OrganizationArgs = {
    /**
     * Select specific fields to fetch from the Organization
     * 
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganizationInclude | null
  }



  /**
   * Model DistinctiveFeatures
   */


  export type AggregateDistinctiveFeatures = {
    _count: DistinctiveFeaturesCountAggregateOutputType | null
    count: DistinctiveFeaturesCountAggregateOutputType | null
    _avg: DistinctiveFeaturesAvgAggregateOutputType | null
    avg: DistinctiveFeaturesAvgAggregateOutputType | null
    _sum: DistinctiveFeaturesSumAggregateOutputType | null
    sum: DistinctiveFeaturesSumAggregateOutputType | null
    _min: DistinctiveFeaturesMinAggregateOutputType | null
    min: DistinctiveFeaturesMinAggregateOutputType | null
    _max: DistinctiveFeaturesMaxAggregateOutputType | null
    max: DistinctiveFeaturesMaxAggregateOutputType | null
  }

  export type DistinctiveFeaturesAvgAggregateOutputType = {
    id: number | null
    personId: number | null
  }

  export type DistinctiveFeaturesSumAggregateOutputType = {
    id: number | null
    personId: number | null
  }

  export type DistinctiveFeaturesMinAggregateOutputType = {
    id: number | null
    personId: number | null
    tato: string | null
    colour: string | null
    sex: string | null
    injury: string | null
  }

  export type DistinctiveFeaturesMaxAggregateOutputType = {
    id: number | null
    personId: number | null
    tato: string | null
    colour: string | null
    sex: string | null
    injury: string | null
  }

  export type DistinctiveFeaturesCountAggregateOutputType = {
    id: number
    personId: number
    tato: number
    colour: number
    sex: number
    injury: number
    _all: number
  }


  export type DistinctiveFeaturesAvgAggregateInputType = {
    id?: true
    personId?: true
  }

  export type DistinctiveFeaturesSumAggregateInputType = {
    id?: true
    personId?: true
  }

  export type DistinctiveFeaturesMinAggregateInputType = {
    id?: true
    personId?: true
    tato?: true
    colour?: true
    sex?: true
    injury?: true
  }

  export type DistinctiveFeaturesMaxAggregateInputType = {
    id?: true
    personId?: true
    tato?: true
    colour?: true
    sex?: true
    injury?: true
  }

  export type DistinctiveFeaturesCountAggregateInputType = {
    id?: true
    personId?: true
    tato?: true
    colour?: true
    sex?: true
    injury?: true
    _all?: true
  }

  export type DistinctiveFeaturesAggregateArgs = {
    /**
     * Filter which DistinctiveFeatures to aggregate.
     * 
    **/
    where?: DistinctiveFeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistinctiveFeatures to fetch.
     * 
    **/
    orderBy?: Enumerable<DistinctiveFeaturesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DistinctiveFeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistinctiveFeatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistinctiveFeatures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DistinctiveFeatures
    **/
    _count?: true | DistinctiveFeaturesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | DistinctiveFeaturesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DistinctiveFeaturesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: DistinctiveFeaturesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DistinctiveFeaturesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: DistinctiveFeaturesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistinctiveFeaturesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: DistinctiveFeaturesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistinctiveFeaturesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: DistinctiveFeaturesMaxAggregateInputType
  }

  export type GetDistinctiveFeaturesAggregateType<T extends DistinctiveFeaturesAggregateArgs> = {
        [P in keyof T & keyof AggregateDistinctiveFeatures]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistinctiveFeatures[P]>
      : GetScalarType<T[P], AggregateDistinctiveFeatures[P]>
  }


    
    
  export type DistinctiveFeaturesGroupByArgs = {
    where?: DistinctiveFeaturesWhereInput
    orderBy?: Enumerable<DistinctiveFeaturesOrderByInput>
    by: Array<DistinctiveFeaturesScalarFieldEnum>
    having?: DistinctiveFeaturesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistinctiveFeaturesCountAggregateInputType | true
    _avg?: DistinctiveFeaturesAvgAggregateInputType
    _sum?: DistinctiveFeaturesSumAggregateInputType
    _min?: DistinctiveFeaturesMinAggregateInputType
    _max?: DistinctiveFeaturesMaxAggregateInputType
  }


  export type DistinctiveFeaturesGroupByOutputType = {
    id: number
    personId: number
    tato: string | null
    colour: string | null
    sex: string
    injury: string | null
    _count: DistinctiveFeaturesCountAggregateOutputType | null
    _avg: DistinctiveFeaturesAvgAggregateOutputType | null
    _sum: DistinctiveFeaturesSumAggregateOutputType | null
    _min: DistinctiveFeaturesMinAggregateOutputType | null
    _max: DistinctiveFeaturesMaxAggregateOutputType | null
  }

  type GetDistinctiveFeaturesGroupByPayload<T extends DistinctiveFeaturesGroupByArgs> = Promise<
    Array<
      PickArray<DistinctiveFeaturesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof DistinctiveFeaturesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], DistinctiveFeaturesGroupByOutputType[P]> 
            : GetScalarType<T[P], DistinctiveFeaturesGroupByOutputType[P]>
        }
      > 
    >


  export type DistinctiveFeaturesSelect = {
    id?: boolean
    personId?: boolean
    tato?: boolean
    colour?: boolean
    sex?: boolean
    injury?: boolean
    person?: boolean | DianonPersonArgs
  }

  export type DistinctiveFeaturesInclude = {
    person?: boolean | DianonPersonArgs
  }

  export type DistinctiveFeaturesGetPayload<
    S extends boolean | null | undefined | DistinctiveFeaturesArgs,
    U = keyof S
      > = S extends true
        ? DistinctiveFeatures
    : S extends undefined
    ? never
    : S extends DistinctiveFeaturesArgs | DistinctiveFeaturesFindManyArgs
    ?'include' extends U
    ? DistinctiveFeatures  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'person'
        ? DianonPersonGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof DistinctiveFeatures ?DistinctiveFeatures [P]
  : 
          P extends 'person'
        ? DianonPersonGetPayload<S['select'][P]> : never
  } 
    : DistinctiveFeatures
  : DistinctiveFeatures


  type DistinctiveFeaturesCountArgs = Merge<
    Omit<DistinctiveFeaturesFindManyArgs, 'select' | 'include'> & {
      select?: DistinctiveFeaturesCountAggregateInputType | true
    }
  >

  export interface DistinctiveFeaturesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DistinctiveFeatures that matches the filter.
     * @param {DistinctiveFeaturesFindUniqueArgs} args - Arguments to find a DistinctiveFeatures
     * @example
     * // Get one DistinctiveFeatures
     * const distinctiveFeatures = await prisma.distinctiveFeatures.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DistinctiveFeaturesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DistinctiveFeaturesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DistinctiveFeatures'> extends True ? CheckSelect<T, Prisma__DistinctiveFeaturesClient<DistinctiveFeatures>, Prisma__DistinctiveFeaturesClient<DistinctiveFeaturesGetPayload<T>>> : CheckSelect<T, Prisma__DistinctiveFeaturesClient<DistinctiveFeatures | null >, Prisma__DistinctiveFeaturesClient<DistinctiveFeaturesGetPayload<T> | null >>

    /**
     * Find the first DistinctiveFeatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistinctiveFeaturesFindFirstArgs} args - Arguments to find a DistinctiveFeatures
     * @example
     * // Get one DistinctiveFeatures
     * const distinctiveFeatures = await prisma.distinctiveFeatures.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DistinctiveFeaturesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DistinctiveFeaturesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DistinctiveFeatures'> extends True ? CheckSelect<T, Prisma__DistinctiveFeaturesClient<DistinctiveFeatures>, Prisma__DistinctiveFeaturesClient<DistinctiveFeaturesGetPayload<T>>> : CheckSelect<T, Prisma__DistinctiveFeaturesClient<DistinctiveFeatures | null >, Prisma__DistinctiveFeaturesClient<DistinctiveFeaturesGetPayload<T> | null >>

    /**
     * Find zero or more DistinctiveFeatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistinctiveFeaturesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DistinctiveFeatures
     * const distinctiveFeatures = await prisma.distinctiveFeatures.findMany()
     * 
     * // Get first 10 DistinctiveFeatures
     * const distinctiveFeatures = await prisma.distinctiveFeatures.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const distinctiveFeaturesWithIdOnly = await prisma.distinctiveFeatures.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DistinctiveFeaturesFindManyArgs>(
      args?: SelectSubset<T, DistinctiveFeaturesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DistinctiveFeatures>>, PrismaPromise<Array<DistinctiveFeaturesGetPayload<T>>>>

    /**
     * Create a DistinctiveFeatures.
     * @param {DistinctiveFeaturesCreateArgs} args - Arguments to create a DistinctiveFeatures.
     * @example
     * // Create one DistinctiveFeatures
     * const DistinctiveFeatures = await prisma.distinctiveFeatures.create({
     *   data: {
     *     // ... data to create a DistinctiveFeatures
     *   }
     * })
     * 
    **/
    create<T extends DistinctiveFeaturesCreateArgs>(
      args: SelectSubset<T, DistinctiveFeaturesCreateArgs>
    ): CheckSelect<T, Prisma__DistinctiveFeaturesClient<DistinctiveFeatures>, Prisma__DistinctiveFeaturesClient<DistinctiveFeaturesGetPayload<T>>>

    /**
     * Create many DistinctiveFeatures.
     *     @param {DistinctiveFeaturesCreateManyArgs} args - Arguments to create many DistinctiveFeatures.
     *     @example
     *     // Create many DistinctiveFeatures
     *     const distinctiveFeatures = await prisma.distinctiveFeatures.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DistinctiveFeaturesCreateManyArgs>(
      args?: SelectSubset<T, DistinctiveFeaturesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DistinctiveFeatures.
     * @param {DistinctiveFeaturesDeleteArgs} args - Arguments to delete one DistinctiveFeatures.
     * @example
     * // Delete one DistinctiveFeatures
     * const DistinctiveFeatures = await prisma.distinctiveFeatures.delete({
     *   where: {
     *     // ... filter to delete one DistinctiveFeatures
     *   }
     * })
     * 
    **/
    delete<T extends DistinctiveFeaturesDeleteArgs>(
      args: SelectSubset<T, DistinctiveFeaturesDeleteArgs>
    ): CheckSelect<T, Prisma__DistinctiveFeaturesClient<DistinctiveFeatures>, Prisma__DistinctiveFeaturesClient<DistinctiveFeaturesGetPayload<T>>>

    /**
     * Update one DistinctiveFeatures.
     * @param {DistinctiveFeaturesUpdateArgs} args - Arguments to update one DistinctiveFeatures.
     * @example
     * // Update one DistinctiveFeatures
     * const distinctiveFeatures = await prisma.distinctiveFeatures.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DistinctiveFeaturesUpdateArgs>(
      args: SelectSubset<T, DistinctiveFeaturesUpdateArgs>
    ): CheckSelect<T, Prisma__DistinctiveFeaturesClient<DistinctiveFeatures>, Prisma__DistinctiveFeaturesClient<DistinctiveFeaturesGetPayload<T>>>

    /**
     * Delete zero or more DistinctiveFeatures.
     * @param {DistinctiveFeaturesDeleteManyArgs} args - Arguments to filter DistinctiveFeatures to delete.
     * @example
     * // Delete a few DistinctiveFeatures
     * const { count } = await prisma.distinctiveFeatures.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DistinctiveFeaturesDeleteManyArgs>(
      args?: SelectSubset<T, DistinctiveFeaturesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistinctiveFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistinctiveFeaturesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DistinctiveFeatures
     * const distinctiveFeatures = await prisma.distinctiveFeatures.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DistinctiveFeaturesUpdateManyArgs>(
      args: SelectSubset<T, DistinctiveFeaturesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DistinctiveFeatures.
     * @param {DistinctiveFeaturesUpsertArgs} args - Arguments to update or create a DistinctiveFeatures.
     * @example
     * // Update or create a DistinctiveFeatures
     * const distinctiveFeatures = await prisma.distinctiveFeatures.upsert({
     *   create: {
     *     // ... data to create a DistinctiveFeatures
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DistinctiveFeatures we want to update
     *   }
     * })
    **/
    upsert<T extends DistinctiveFeaturesUpsertArgs>(
      args: SelectSubset<T, DistinctiveFeaturesUpsertArgs>
    ): CheckSelect<T, Prisma__DistinctiveFeaturesClient<DistinctiveFeatures>, Prisma__DistinctiveFeaturesClient<DistinctiveFeaturesGetPayload<T>>>

    /**
     * Count the number of DistinctiveFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistinctiveFeaturesCountArgs} args - Arguments to filter DistinctiveFeatures to count.
     * @example
     * // Count the number of DistinctiveFeatures
     * const count = await prisma.distinctiveFeatures.count({
     *   where: {
     *     // ... the filter for the DistinctiveFeatures we want to count
     *   }
     * })
    **/
    count<T extends DistinctiveFeaturesCountArgs>(
      args?: Subset<T, DistinctiveFeaturesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistinctiveFeaturesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DistinctiveFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistinctiveFeaturesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistinctiveFeaturesAggregateArgs>(args: Subset<T, DistinctiveFeaturesAggregateArgs>): PrismaPromise<GetDistinctiveFeaturesAggregateType<T>>

    /**
     * Group by DistinctiveFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistinctiveFeaturesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistinctiveFeaturesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistinctiveFeaturesGroupByArgs['orderBy'] }
        : { orderBy?: DistinctiveFeaturesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistinctiveFeaturesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistinctiveFeaturesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for DistinctiveFeatures.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DistinctiveFeaturesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    person<T extends DianonPersonArgs = {}>(args?: Subset<T, DianonPersonArgs>): CheckSelect<T, Prisma__DianonPersonClient<DianonPerson | null >, Prisma__DianonPersonClient<DianonPersonGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * DistinctiveFeatures findUnique
   */
  export type DistinctiveFeaturesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the DistinctiveFeatures
     * 
    **/
    select?: DistinctiveFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DistinctiveFeaturesInclude | null
    /**
     * Throw an Error if a DistinctiveFeatures can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DistinctiveFeatures to fetch.
     * 
    **/
    where: DistinctiveFeaturesWhereUniqueInput
  }


  /**
   * DistinctiveFeatures findFirst
   */
  export type DistinctiveFeaturesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the DistinctiveFeatures
     * 
    **/
    select?: DistinctiveFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DistinctiveFeaturesInclude | null
    /**
     * Throw an Error if a DistinctiveFeatures can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DistinctiveFeatures to fetch.
     * 
    **/
    where?: DistinctiveFeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistinctiveFeatures to fetch.
     * 
    **/
    orderBy?: Enumerable<DistinctiveFeaturesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistinctiveFeatures.
     * 
    **/
    cursor?: DistinctiveFeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistinctiveFeatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistinctiveFeatures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistinctiveFeatures.
     * 
    **/
    distinct?: Enumerable<DistinctiveFeaturesScalarFieldEnum>
  }


  /**
   * DistinctiveFeatures findMany
   */
  export type DistinctiveFeaturesFindManyArgs = {
    /**
     * Select specific fields to fetch from the DistinctiveFeatures
     * 
    **/
    select?: DistinctiveFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DistinctiveFeaturesInclude | null
    /**
     * Filter, which DistinctiveFeatures to fetch.
     * 
    **/
    where?: DistinctiveFeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistinctiveFeatures to fetch.
     * 
    **/
    orderBy?: Enumerable<DistinctiveFeaturesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DistinctiveFeatures.
     * 
    **/
    cursor?: DistinctiveFeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistinctiveFeatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistinctiveFeatures.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DistinctiveFeaturesScalarFieldEnum>
  }


  /**
   * DistinctiveFeatures create
   */
  export type DistinctiveFeaturesCreateArgs = {
    /**
     * Select specific fields to fetch from the DistinctiveFeatures
     * 
    **/
    select?: DistinctiveFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DistinctiveFeaturesInclude | null
    /**
     * The data needed to create a DistinctiveFeatures.
     * 
    **/
    data: XOR<DistinctiveFeaturesCreateInput, DistinctiveFeaturesUncheckedCreateInput>
  }


  /**
   * DistinctiveFeatures createMany
   */
  export type DistinctiveFeaturesCreateManyArgs = {
    data: Enumerable<DistinctiveFeaturesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DistinctiveFeatures update
   */
  export type DistinctiveFeaturesUpdateArgs = {
    /**
     * Select specific fields to fetch from the DistinctiveFeatures
     * 
    **/
    select?: DistinctiveFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DistinctiveFeaturesInclude | null
    /**
     * The data needed to update a DistinctiveFeatures.
     * 
    **/
    data: XOR<DistinctiveFeaturesUpdateInput, DistinctiveFeaturesUncheckedUpdateInput>
    /**
     * Choose, which DistinctiveFeatures to update.
     * 
    **/
    where: DistinctiveFeaturesWhereUniqueInput
  }


  /**
   * DistinctiveFeatures updateMany
   */
  export type DistinctiveFeaturesUpdateManyArgs = {
    data: XOR<DistinctiveFeaturesUpdateManyMutationInput, DistinctiveFeaturesUncheckedUpdateManyInput>
    where?: DistinctiveFeaturesWhereInput
  }


  /**
   * DistinctiveFeatures upsert
   */
  export type DistinctiveFeaturesUpsertArgs = {
    /**
     * Select specific fields to fetch from the DistinctiveFeatures
     * 
    **/
    select?: DistinctiveFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DistinctiveFeaturesInclude | null
    /**
     * The filter to search for the DistinctiveFeatures to update in case it exists.
     * 
    **/
    where: DistinctiveFeaturesWhereUniqueInput
    /**
     * In case the DistinctiveFeatures found by the `where` argument doesn't exist, create a new DistinctiveFeatures with this data.
     * 
    **/
    create: XOR<DistinctiveFeaturesCreateInput, DistinctiveFeaturesUncheckedCreateInput>
    /**
     * In case the DistinctiveFeatures was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DistinctiveFeaturesUpdateInput, DistinctiveFeaturesUncheckedUpdateInput>
  }


  /**
   * DistinctiveFeatures delete
   */
  export type DistinctiveFeaturesDeleteArgs = {
    /**
     * Select specific fields to fetch from the DistinctiveFeatures
     * 
    **/
    select?: DistinctiveFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DistinctiveFeaturesInclude | null
    /**
     * Filter which DistinctiveFeatures to delete.
     * 
    **/
    where: DistinctiveFeaturesWhereUniqueInput
  }


  /**
   * DistinctiveFeatures deleteMany
   */
  export type DistinctiveFeaturesDeleteManyArgs = {
    where?: DistinctiveFeaturesWhereInput
  }


  /**
   * DistinctiveFeatures without action
   */
  export type DistinctiveFeaturesArgs = {
    /**
     * Select specific fields to fetch from the DistinctiveFeatures
     * 
    **/
    select?: DistinctiveFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DistinctiveFeaturesInclude | null
  }



  /**
   * Model PersonalInfo
   */


  export type AggregatePersonalInfo = {
    _count: PersonalInfoCountAggregateOutputType | null
    count: PersonalInfoCountAggregateOutputType | null
    _avg: PersonalInfoAvgAggregateOutputType | null
    avg: PersonalInfoAvgAggregateOutputType | null
    _sum: PersonalInfoSumAggregateOutputType | null
    sum: PersonalInfoSumAggregateOutputType | null
    _min: PersonalInfoMinAggregateOutputType | null
    min: PersonalInfoMinAggregateOutputType | null
    _max: PersonalInfoMaxAggregateOutputType | null
    max: PersonalInfoMaxAggregateOutputType | null
  }

  export type PersonalInfoAvgAggregateOutputType = {
    id: number | null
    personId: number | null
  }

  export type PersonalInfoSumAggregateOutputType = {
    id: number | null
    personId: number | null
  }

  export type PersonalInfoMinAggregateOutputType = {
    id: number | null
    personId: number | null
    passport: string | null
    marital: string | null
    children: string | null
    adress: string | null
    register: string | null
    telephone: string | null
  }

  export type PersonalInfoMaxAggregateOutputType = {
    id: number | null
    personId: number | null
    passport: string | null
    marital: string | null
    children: string | null
    adress: string | null
    register: string | null
    telephone: string | null
  }

  export type PersonalInfoCountAggregateOutputType = {
    id: number
    personId: number
    passport: number
    marital: number
    children: number
    adress: number
    register: number
    telephone: number
    _all: number
  }


  export type PersonalInfoAvgAggregateInputType = {
    id?: true
    personId?: true
  }

  export type PersonalInfoSumAggregateInputType = {
    id?: true
    personId?: true
  }

  export type PersonalInfoMinAggregateInputType = {
    id?: true
    personId?: true
    passport?: true
    marital?: true
    children?: true
    adress?: true
    register?: true
    telephone?: true
  }

  export type PersonalInfoMaxAggregateInputType = {
    id?: true
    personId?: true
    passport?: true
    marital?: true
    children?: true
    adress?: true
    register?: true
    telephone?: true
  }

  export type PersonalInfoCountAggregateInputType = {
    id?: true
    personId?: true
    passport?: true
    marital?: true
    children?: true
    adress?: true
    register?: true
    telephone?: true
    _all?: true
  }

  export type PersonalInfoAggregateArgs = {
    /**
     * Filter which PersonalInfo to aggregate.
     * 
    **/
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     * 
    **/
    orderBy?: Enumerable<PersonalInfoOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PersonalInfos
    **/
    _count?: true | PersonalInfoCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | PersonalInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonalInfoAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: PersonalInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonalInfoSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: PersonalInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonalInfoMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: PersonalInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonalInfoMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: PersonalInfoMaxAggregateInputType
  }

  export type GetPersonalInfoAggregateType<T extends PersonalInfoAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonalInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonalInfo[P]>
      : GetScalarType<T[P], AggregatePersonalInfo[P]>
  }


    
    
  export type PersonalInfoGroupByArgs = {
    where?: PersonalInfoWhereInput
    orderBy?: Enumerable<PersonalInfoOrderByInput>
    by: Array<PersonalInfoScalarFieldEnum>
    having?: PersonalInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonalInfoCountAggregateInputType | true
    _avg?: PersonalInfoAvgAggregateInputType
    _sum?: PersonalInfoSumAggregateInputType
    _min?: PersonalInfoMinAggregateInputType
    _max?: PersonalInfoMaxAggregateInputType
  }


  export type PersonalInfoGroupByOutputType = {
    id: number
    personId: number
    passport: string | null
    marital: string | null
    children: string | null
    adress: string | null
    register: string | null
    telephone: string
    _count: PersonalInfoCountAggregateOutputType | null
    _avg: PersonalInfoAvgAggregateOutputType | null
    _sum: PersonalInfoSumAggregateOutputType | null
    _min: PersonalInfoMinAggregateOutputType | null
    _max: PersonalInfoMaxAggregateOutputType | null
  }

  type GetPersonalInfoGroupByPayload<T extends PersonalInfoGroupByArgs> = Promise<
    Array<
      PickArray<PersonalInfoGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof PersonalInfoGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], PersonalInfoGroupByOutputType[P]> 
            : GetScalarType<T[P], PersonalInfoGroupByOutputType[P]>
        }
      > 
    >


  export type PersonalInfoSelect = {
    id?: boolean
    personId?: boolean
    passport?: boolean
    marital?: boolean
    children?: boolean
    adress?: boolean
    register?: boolean
    telephone?: boolean
    person?: boolean | DianonPersonArgs
  }

  export type PersonalInfoInclude = {
    person?: boolean | DianonPersonArgs
  }

  export type PersonalInfoGetPayload<
    S extends boolean | null | undefined | PersonalInfoArgs,
    U = keyof S
      > = S extends true
        ? PersonalInfo
    : S extends undefined
    ? never
    : S extends PersonalInfoArgs | PersonalInfoFindManyArgs
    ?'include' extends U
    ? PersonalInfo  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'person'
        ? DianonPersonGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof PersonalInfo ?PersonalInfo [P]
  : 
          P extends 'person'
        ? DianonPersonGetPayload<S['select'][P]> : never
  } 
    : PersonalInfo
  : PersonalInfo


  type PersonalInfoCountArgs = Merge<
    Omit<PersonalInfoFindManyArgs, 'select' | 'include'> & {
      select?: PersonalInfoCountAggregateInputType | true
    }
  >

  export interface PersonalInfoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PersonalInfo that matches the filter.
     * @param {PersonalInfoFindUniqueArgs} args - Arguments to find a PersonalInfo
     * @example
     * // Get one PersonalInfo
     * const personalInfo = await prisma.personalInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PersonalInfoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PersonalInfoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PersonalInfo'> extends True ? CheckSelect<T, Prisma__PersonalInfoClient<PersonalInfo>, Prisma__PersonalInfoClient<PersonalInfoGetPayload<T>>> : CheckSelect<T, Prisma__PersonalInfoClient<PersonalInfo | null >, Prisma__PersonalInfoClient<PersonalInfoGetPayload<T> | null >>

    /**
     * Find the first PersonalInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoFindFirstArgs} args - Arguments to find a PersonalInfo
     * @example
     * // Get one PersonalInfo
     * const personalInfo = await prisma.personalInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PersonalInfoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PersonalInfoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PersonalInfo'> extends True ? CheckSelect<T, Prisma__PersonalInfoClient<PersonalInfo>, Prisma__PersonalInfoClient<PersonalInfoGetPayload<T>>> : CheckSelect<T, Prisma__PersonalInfoClient<PersonalInfo | null >, Prisma__PersonalInfoClient<PersonalInfoGetPayload<T> | null >>

    /**
     * Find zero or more PersonalInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PersonalInfos
     * const personalInfos = await prisma.personalInfo.findMany()
     * 
     * // Get first 10 PersonalInfos
     * const personalInfos = await prisma.personalInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personalInfoWithIdOnly = await prisma.personalInfo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PersonalInfoFindManyArgs>(
      args?: SelectSubset<T, PersonalInfoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PersonalInfo>>, PrismaPromise<Array<PersonalInfoGetPayload<T>>>>

    /**
     * Create a PersonalInfo.
     * @param {PersonalInfoCreateArgs} args - Arguments to create a PersonalInfo.
     * @example
     * // Create one PersonalInfo
     * const PersonalInfo = await prisma.personalInfo.create({
     *   data: {
     *     // ... data to create a PersonalInfo
     *   }
     * })
     * 
    **/
    create<T extends PersonalInfoCreateArgs>(
      args: SelectSubset<T, PersonalInfoCreateArgs>
    ): CheckSelect<T, Prisma__PersonalInfoClient<PersonalInfo>, Prisma__PersonalInfoClient<PersonalInfoGetPayload<T>>>

    /**
     * Create many PersonalInfos.
     *     @param {PersonalInfoCreateManyArgs} args - Arguments to create many PersonalInfos.
     *     @example
     *     // Create many PersonalInfos
     *     const personalInfo = await prisma.personalInfo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PersonalInfoCreateManyArgs>(
      args?: SelectSubset<T, PersonalInfoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PersonalInfo.
     * @param {PersonalInfoDeleteArgs} args - Arguments to delete one PersonalInfo.
     * @example
     * // Delete one PersonalInfo
     * const PersonalInfo = await prisma.personalInfo.delete({
     *   where: {
     *     // ... filter to delete one PersonalInfo
     *   }
     * })
     * 
    **/
    delete<T extends PersonalInfoDeleteArgs>(
      args: SelectSubset<T, PersonalInfoDeleteArgs>
    ): CheckSelect<T, Prisma__PersonalInfoClient<PersonalInfo>, Prisma__PersonalInfoClient<PersonalInfoGetPayload<T>>>

    /**
     * Update one PersonalInfo.
     * @param {PersonalInfoUpdateArgs} args - Arguments to update one PersonalInfo.
     * @example
     * // Update one PersonalInfo
     * const personalInfo = await prisma.personalInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PersonalInfoUpdateArgs>(
      args: SelectSubset<T, PersonalInfoUpdateArgs>
    ): CheckSelect<T, Prisma__PersonalInfoClient<PersonalInfo>, Prisma__PersonalInfoClient<PersonalInfoGetPayload<T>>>

    /**
     * Delete zero or more PersonalInfos.
     * @param {PersonalInfoDeleteManyArgs} args - Arguments to filter PersonalInfos to delete.
     * @example
     * // Delete a few PersonalInfos
     * const { count } = await prisma.personalInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PersonalInfoDeleteManyArgs>(
      args?: SelectSubset<T, PersonalInfoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonalInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PersonalInfos
     * const personalInfo = await prisma.personalInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PersonalInfoUpdateManyArgs>(
      args: SelectSubset<T, PersonalInfoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PersonalInfo.
     * @param {PersonalInfoUpsertArgs} args - Arguments to update or create a PersonalInfo.
     * @example
     * // Update or create a PersonalInfo
     * const personalInfo = await prisma.personalInfo.upsert({
     *   create: {
     *     // ... data to create a PersonalInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PersonalInfo we want to update
     *   }
     * })
    **/
    upsert<T extends PersonalInfoUpsertArgs>(
      args: SelectSubset<T, PersonalInfoUpsertArgs>
    ): CheckSelect<T, Prisma__PersonalInfoClient<PersonalInfo>, Prisma__PersonalInfoClient<PersonalInfoGetPayload<T>>>

    /**
     * Count the number of PersonalInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoCountArgs} args - Arguments to filter PersonalInfos to count.
     * @example
     * // Count the number of PersonalInfos
     * const count = await prisma.personalInfo.count({
     *   where: {
     *     // ... the filter for the PersonalInfos we want to count
     *   }
     * })
    **/
    count<T extends PersonalInfoCountArgs>(
      args?: Subset<T, PersonalInfoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonalInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PersonalInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonalInfoAggregateArgs>(args: Subset<T, PersonalInfoAggregateArgs>): PrismaPromise<GetPersonalInfoAggregateType<T>>

    /**
     * Group by PersonalInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonalInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonalInfoGroupByArgs['orderBy'] }
        : { orderBy?: PersonalInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonalInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonalInfoGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PersonalInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PersonalInfoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    person<T extends DianonPersonArgs = {}>(args?: Subset<T, DianonPersonArgs>): CheckSelect<T, Prisma__DianonPersonClient<DianonPerson | null >, Prisma__DianonPersonClient<DianonPersonGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PersonalInfo findUnique
   */
  export type PersonalInfoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     * 
    **/
    select?: PersonalInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalInfoInclude | null
    /**
     * Throw an Error if a PersonalInfo can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PersonalInfo to fetch.
     * 
    **/
    where: PersonalInfoWhereUniqueInput
  }


  /**
   * PersonalInfo findFirst
   */
  export type PersonalInfoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     * 
    **/
    select?: PersonalInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalInfoInclude | null
    /**
     * Throw an Error if a PersonalInfo can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PersonalInfo to fetch.
     * 
    **/
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     * 
    **/
    orderBy?: Enumerable<PersonalInfoOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalInfos.
     * 
    **/
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalInfos.
     * 
    **/
    distinct?: Enumerable<PersonalInfoScalarFieldEnum>
  }


  /**
   * PersonalInfo findMany
   */
  export type PersonalInfoFindManyArgs = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     * 
    **/
    select?: PersonalInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalInfoInclude | null
    /**
     * Filter, which PersonalInfos to fetch.
     * 
    **/
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     * 
    **/
    orderBy?: Enumerable<PersonalInfoOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PersonalInfos.
     * 
    **/
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PersonalInfoScalarFieldEnum>
  }


  /**
   * PersonalInfo create
   */
  export type PersonalInfoCreateArgs = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     * 
    **/
    select?: PersonalInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalInfoInclude | null
    /**
     * The data needed to create a PersonalInfo.
     * 
    **/
    data: XOR<PersonalInfoCreateInput, PersonalInfoUncheckedCreateInput>
  }


  /**
   * PersonalInfo createMany
   */
  export type PersonalInfoCreateManyArgs = {
    data: Enumerable<PersonalInfoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PersonalInfo update
   */
  export type PersonalInfoUpdateArgs = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     * 
    **/
    select?: PersonalInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalInfoInclude | null
    /**
     * The data needed to update a PersonalInfo.
     * 
    **/
    data: XOR<PersonalInfoUpdateInput, PersonalInfoUncheckedUpdateInput>
    /**
     * Choose, which PersonalInfo to update.
     * 
    **/
    where: PersonalInfoWhereUniqueInput
  }


  /**
   * PersonalInfo updateMany
   */
  export type PersonalInfoUpdateManyArgs = {
    data: XOR<PersonalInfoUpdateManyMutationInput, PersonalInfoUncheckedUpdateManyInput>
    where?: PersonalInfoWhereInput
  }


  /**
   * PersonalInfo upsert
   */
  export type PersonalInfoUpsertArgs = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     * 
    **/
    select?: PersonalInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalInfoInclude | null
    /**
     * The filter to search for the PersonalInfo to update in case it exists.
     * 
    **/
    where: PersonalInfoWhereUniqueInput
    /**
     * In case the PersonalInfo found by the `where` argument doesn't exist, create a new PersonalInfo with this data.
     * 
    **/
    create: XOR<PersonalInfoCreateInput, PersonalInfoUncheckedCreateInput>
    /**
     * In case the PersonalInfo was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PersonalInfoUpdateInput, PersonalInfoUncheckedUpdateInput>
  }


  /**
   * PersonalInfo delete
   */
  export type PersonalInfoDeleteArgs = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     * 
    **/
    select?: PersonalInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalInfoInclude | null
    /**
     * Filter which PersonalInfo to delete.
     * 
    **/
    where: PersonalInfoWhereUniqueInput
  }


  /**
   * PersonalInfo deleteMany
   */
  export type PersonalInfoDeleteManyArgs = {
    where?: PersonalInfoWhereInput
  }


  /**
   * PersonalInfo without action
   */
  export type PersonalInfoArgs = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     * 
    **/
    select?: PersonalInfoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PersonalInfoInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    isAdmin: 'isAdmin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    type_token: 'type_token',
    emailToken: 'emailToken',
    valid: 'valid',
    expiration: 'expiration',
    userId: 'userId'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const DianonPersonScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    social: 'social'
  };

  export type DianonPersonScalarFieldEnum = (typeof DianonPersonScalarFieldEnum)[keyof typeof DianonPersonScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    personID: 'personID',
    name: 'name',
    rank: 'rank',
    date: 'date',
    firstName: 'firstName',
    lastName: 'lastName'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const DistinctiveFeaturesScalarFieldEnum: {
    id: 'id',
    personId: 'personId',
    tato: 'tato',
    colour: 'colour',
    sex: 'sex',
    injury: 'injury'
  };

  export type DistinctiveFeaturesScalarFieldEnum = (typeof DistinctiveFeaturesScalarFieldEnum)[keyof typeof DistinctiveFeaturesScalarFieldEnum]


  export const PersonalInfoScalarFieldEnum: {
    id: 'id',
    personId: 'personId',
    passport: 'passport',
    marital: 'marital',
    children: 'children',
    adress: 'adress',
    register: 'register',
    telephone: 'telephone'
  };

  export type PersonalInfoScalarFieldEnum = (typeof PersonalInfoScalarFieldEnum)[keyof typeof PersonalInfoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    isAdmin?: BoolFilter | boolean
    tokens?: TokenListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    isAdmin?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    firstName?: StringNullableWithAggregatesFilter | string | null
    lastName?: StringNullableWithAggregatesFilter | string | null
    isAdmin?: BoolWithAggregatesFilter | boolean
  }

  export type TokenWhereInput = {
    AND?: Enumerable<TokenWhereInput>
    OR?: Enumerable<TokenWhereInput>
    NOT?: Enumerable<TokenWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    type_token?: EnumTokenTypeFilter | TokenType
    emailToken?: StringNullableFilter | string | null
    valid?: BoolFilter | boolean
    expiration?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TokenOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type_token?: SortOrder
    emailToken?: SortOrder
    valid?: SortOrder
    expiration?: SortOrder
    userId?: SortOrder
  }

  export type TokenWhereUniqueInput = {
    id?: number
    emailToken?: string
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<TokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TokenScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    type_token?: EnumTokenTypeWithAggregatesFilter | TokenType
    emailToken?: StringNullableWithAggregatesFilter | string | null
    valid?: BoolWithAggregatesFilter | boolean
    expiration?: DateTimeWithAggregatesFilter | Date | string
    userId?: IntWithAggregatesFilter | number
  }

  export type DianonPersonWhereInput = {
    AND?: Enumerable<DianonPersonWhereInput>
    OR?: Enumerable<DianonPersonWhereInput>
    NOT?: Enumerable<DianonPersonWhereInput>
    id?: IntFilter | number
    email?: StringNullableFilter | string | null
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    social?: JsonNullableFilter
    distinctiveFeatures?: DistinctiveFeaturesListRelationFilter
    organization?: OrganizationListRelationFilter
    personalInfo?: PersonalInfoListRelationFilter
  }

  export type DianonPersonOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    social?: SortOrder
  }

  export type DianonPersonWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type DianonPersonScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DianonPersonScalarWhereWithAggregatesInput>
    OR?: Enumerable<DianonPersonScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DianonPersonScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringNullableWithAggregatesFilter | string | null
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    social?: JsonNullableWithAggregatesFilter
  }

  export type OrganizationWhereInput = {
    AND?: Enumerable<OrganizationWhereInput>
    OR?: Enumerable<OrganizationWhereInput>
    NOT?: Enumerable<OrganizationWhereInput>
    id?: IntFilter | number
    personID?: IntFilter | number
    name?: StringFilter | string
    rank?: StringNullableFilter | string | null
    date?: DateTimeNullableFilter | Date | string | null
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    person?: XOR<DianonPersonRelationFilter, DianonPersonWhereInput>
  }

  export type OrganizationOrderByInput = {
    id?: SortOrder
    personID?: SortOrder
    name?: SortOrder
    rank?: SortOrder
    date?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type OrganizationWhereUniqueInput = {
    id?: number
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    personID?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    rank?: StringNullableWithAggregatesFilter | string | null
    date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    firstName?: StringNullableWithAggregatesFilter | string | null
    lastName?: StringNullableWithAggregatesFilter | string | null
  }

  export type DistinctiveFeaturesWhereInput = {
    AND?: Enumerable<DistinctiveFeaturesWhereInput>
    OR?: Enumerable<DistinctiveFeaturesWhereInput>
    NOT?: Enumerable<DistinctiveFeaturesWhereInput>
    id?: IntFilter | number
    personId?: IntFilter | number
    tato?: StringNullableFilter | string | null
    colour?: StringNullableFilter | string | null
    sex?: StringFilter | string
    injury?: StringNullableFilter | string | null
    person?: XOR<DianonPersonRelationFilter, DianonPersonWhereInput>
  }

  export type DistinctiveFeaturesOrderByInput = {
    id?: SortOrder
    personId?: SortOrder
    tato?: SortOrder
    colour?: SortOrder
    sex?: SortOrder
    injury?: SortOrder
  }

  export type DistinctiveFeaturesWhereUniqueInput = {
    id?: number
  }

  export type DistinctiveFeaturesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DistinctiveFeaturesScalarWhereWithAggregatesInput>
    OR?: Enumerable<DistinctiveFeaturesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DistinctiveFeaturesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    personId?: IntWithAggregatesFilter | number
    tato?: StringNullableWithAggregatesFilter | string | null
    colour?: StringNullableWithAggregatesFilter | string | null
    sex?: StringWithAggregatesFilter | string
    injury?: StringNullableWithAggregatesFilter | string | null
  }

  export type PersonalInfoWhereInput = {
    AND?: Enumerable<PersonalInfoWhereInput>
    OR?: Enumerable<PersonalInfoWhereInput>
    NOT?: Enumerable<PersonalInfoWhereInput>
    id?: IntFilter | number
    personId?: IntFilter | number
    passport?: StringNullableFilter | string | null
    marital?: StringNullableFilter | string | null
    children?: StringNullableFilter | string | null
    adress?: StringNullableFilter | string | null
    register?: StringNullableFilter | string | null
    telephone?: StringFilter | string
    person?: XOR<DianonPersonRelationFilter, DianonPersonWhereInput>
  }

  export type PersonalInfoOrderByInput = {
    id?: SortOrder
    personId?: SortOrder
    passport?: SortOrder
    marital?: SortOrder
    children?: SortOrder
    adress?: SortOrder
    register?: SortOrder
    telephone?: SortOrder
  }

  export type PersonalInfoWhereUniqueInput = {
    id?: number
    passport?: string
  }

  export type PersonalInfoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PersonalInfoScalarWhereWithAggregatesInput>
    OR?: Enumerable<PersonalInfoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PersonalInfoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    personId?: IntWithAggregatesFilter | number
    passport?: StringNullableWithAggregatesFilter | string | null
    marital?: StringNullableWithAggregatesFilter | string | null
    children?: StringNullableWithAggregatesFilter | string | null
    adress?: StringNullableWithAggregatesFilter | string | null
    register?: StringNullableWithAggregatesFilter | string | null
    telephone?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    isAdmin?: boolean
    tokens?: TokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    isAdmin?: boolean
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    tokens?: TokenUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    tokens?: TokenUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    isAdmin?: boolean
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TokenCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    type_token: TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
    user: UserCreateNestedOneWithoutTokensInput
  }

  export type TokenUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    type_token: TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
    userId: number
  }

  export type TokenUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type_token?: EnumTokenTypeFieldUpdateOperationsInput | TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTokensInput
  }

  export type TokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type_token?: EnumTokenTypeFieldUpdateOperationsInput | TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type TokenCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    type_token: TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
    userId: number
  }

  export type TokenUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type_token?: EnumTokenTypeFieldUpdateOperationsInput | TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type_token?: EnumTokenTypeFieldUpdateOperationsInput | TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type DianonPersonCreateInput = {
    email?: string | null
    firstName: string
    lastName: string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesCreateNestedManyWithoutPersonInput
    organization?: OrganizationCreateNestedManyWithoutPersonInput
    personalInfo?: PersonalInfoCreateNestedManyWithoutPersonInput
  }

  export type DianonPersonUncheckedCreateInput = {
    id?: number
    email?: string | null
    firstName: string
    lastName: string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesUncheckedCreateNestedManyWithoutPersonInput
    organization?: OrganizationUncheckedCreateNestedManyWithoutPersonInput
    personalInfo?: PersonalInfoUncheckedCreateNestedManyWithoutPersonInput
  }

  export type DianonPersonUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesUpdateManyWithoutPersonInput
    organization?: OrganizationUpdateManyWithoutPersonInput
    personalInfo?: PersonalInfoUpdateManyWithoutPersonInput
  }

  export type DianonPersonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesUncheckedUpdateManyWithoutPersonInput
    organization?: OrganizationUncheckedUpdateManyWithoutPersonInput
    personalInfo?: PersonalInfoUncheckedUpdateManyWithoutPersonInput
  }

  export type DianonPersonCreateManyInput = {
    id?: number
    email?: string | null
    firstName: string
    lastName: string
    social?: InputJsonValue | null
  }

  export type DianonPersonUpdateManyMutationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    social?: InputJsonValue | null
  }

  export type DianonPersonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    social?: InputJsonValue | null
  }

  export type OrganizationCreateInput = {
    name: string
    rank?: string | null
    date?: Date | string | null
    firstName?: string | null
    lastName?: string | null
    person: DianonPersonCreateNestedOneWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: number
    personID: number
    name: string
    rank?: string | null
    date?: Date | string | null
    firstName?: string | null
    lastName?: string | null
  }

  export type OrganizationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    person?: DianonPersonUpdateOneRequiredWithoutOrganizationInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    personID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationCreateManyInput = {
    id?: number
    personID: number
    name: string
    rank?: string | null
    date?: Date | string | null
    firstName?: string | null
    lastName?: string | null
  }

  export type OrganizationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    personID?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistinctiveFeaturesCreateInput = {
    tato?: string | null
    colour?: string | null
    sex: string
    injury?: string | null
    person: DianonPersonCreateNestedOneWithoutDistinctiveFeaturesInput
  }

  export type DistinctiveFeaturesUncheckedCreateInput = {
    id?: number
    personId: number
    tato?: string | null
    colour?: string | null
    sex: string
    injury?: string | null
  }

  export type DistinctiveFeaturesUpdateInput = {
    tato?: NullableStringFieldUpdateOperationsInput | string | null
    colour?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    injury?: NullableStringFieldUpdateOperationsInput | string | null
    person?: DianonPersonUpdateOneRequiredWithoutDistinctiveFeaturesInput
  }

  export type DistinctiveFeaturesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    personId?: IntFieldUpdateOperationsInput | number
    tato?: NullableStringFieldUpdateOperationsInput | string | null
    colour?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    injury?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistinctiveFeaturesCreateManyInput = {
    id?: number
    personId: number
    tato?: string | null
    colour?: string | null
    sex: string
    injury?: string | null
  }

  export type DistinctiveFeaturesUpdateManyMutationInput = {
    tato?: NullableStringFieldUpdateOperationsInput | string | null
    colour?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    injury?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistinctiveFeaturesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    personId?: IntFieldUpdateOperationsInput | number
    tato?: NullableStringFieldUpdateOperationsInput | string | null
    colour?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    injury?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalInfoCreateInput = {
    passport?: string | null
    marital?: string | null
    children?: string | null
    adress?: string | null
    register?: string | null
    telephone: string
    person: DianonPersonCreateNestedOneWithoutPersonalInfoInput
  }

  export type PersonalInfoUncheckedCreateInput = {
    id?: number
    personId: number
    passport?: string | null
    marital?: string | null
    children?: string | null
    adress?: string | null
    register?: string | null
    telephone: string
  }

  export type PersonalInfoUpdateInput = {
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    marital?: NullableStringFieldUpdateOperationsInput | string | null
    children?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    register?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    person?: DianonPersonUpdateOneRequiredWithoutPersonalInfoInput
  }

  export type PersonalInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    personId?: IntFieldUpdateOperationsInput | number
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    marital?: NullableStringFieldUpdateOperationsInput | string | null
    children?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    register?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalInfoCreateManyInput = {
    id?: number
    personId: number
    passport?: string | null
    marital?: string | null
    children?: string | null
    adress?: string | null
    register?: string | null
    telephone: string
  }

  export type PersonalInfoUpdateManyMutationInput = {
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    marital?: NullableStringFieldUpdateOperationsInput | string | null
    children?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    register?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    personId?: IntFieldUpdateOperationsInput | number
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    marital?: NullableStringFieldUpdateOperationsInput | string | null
    children?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    register?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type TokenListRelationFilter = {
    every?: TokenWhereInput
    some?: TokenWhereInput
    none?: TokenWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumTokenTypeFilter = {
    equals?: TokenType
    in?: Enumerable<TokenType>
    notIn?: Enumerable<TokenType>
    not?: NestedEnumTokenTypeFilter | TokenType
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type EnumTokenTypeWithAggregatesFilter = {
    equals?: TokenType
    in?: Enumerable<TokenType>
    notIn?: Enumerable<TokenType>
    not?: NestedEnumTokenTypeWithAggregatesFilter | TokenType
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedEnumTokenTypeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedEnumTokenTypeFilter
    _max?: NestedEnumTokenTypeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedEnumTokenTypeFilter
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | null
    not?: InputJsonValue | null
  }

  export type DistinctiveFeaturesListRelationFilter = {
    every?: DistinctiveFeaturesWhereInput
    some?: DistinctiveFeaturesWhereInput
    none?: DistinctiveFeaturesWhereInput
  }

  export type OrganizationListRelationFilter = {
    every?: OrganizationWhereInput
    some?: OrganizationWhereInput
    none?: OrganizationWhereInput
  }

  export type PersonalInfoListRelationFilter = {
    every?: PersonalInfoWhereInput
    some?: PersonalInfoWhereInput
    none?: PersonalInfoWhereInput
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | null
    not?: InputJsonValue | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedJsonNullableFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DianonPersonRelationFilter = {
    is?: DianonPersonWhereInput
    isNot?: DianonPersonWhereInput
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type TokenCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: Enumerable<TokenWhereUniqueInput>
  }

  export type TokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: Enumerable<TokenWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TokenUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: Enumerable<TokenWhereUniqueInput>
    set?: Enumerable<TokenWhereUniqueInput>
    disconnect?: Enumerable<TokenWhereUniqueInput>
    delete?: Enumerable<TokenWhereUniqueInput>
    update?: Enumerable<TokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TokenScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TokenUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: Enumerable<TokenWhereUniqueInput>
    set?: Enumerable<TokenWhereUniqueInput>
    disconnect?: Enumerable<TokenWhereUniqueInput>
    delete?: Enumerable<TokenWhereUniqueInput>
    update?: Enumerable<TokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TokenScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutTokensInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumTokenTypeFieldUpdateOperationsInput = {
    set?: TokenType
  }

  export type UserUpdateOneRequiredWithoutTokensInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    upsert?: UserUpsertWithoutTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
  }

  export type DistinctiveFeaturesCreateNestedManyWithoutPersonInput = {
    create?: XOR<Enumerable<DistinctiveFeaturesCreateWithoutPersonInput>, Enumerable<DistinctiveFeaturesUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<DistinctiveFeaturesCreateOrConnectWithoutPersonInput>
    createMany?: DistinctiveFeaturesCreateManyPersonInputEnvelope
    connect?: Enumerable<DistinctiveFeaturesWhereUniqueInput>
  }

  export type OrganizationCreateNestedManyWithoutPersonInput = {
    create?: XOR<Enumerable<OrganizationCreateWithoutPersonInput>, Enumerable<OrganizationUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutPersonInput>
    createMany?: OrganizationCreateManyPersonInputEnvelope
    connect?: Enumerable<OrganizationWhereUniqueInput>
  }

  export type PersonalInfoCreateNestedManyWithoutPersonInput = {
    create?: XOR<Enumerable<PersonalInfoCreateWithoutPersonInput>, Enumerable<PersonalInfoUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<PersonalInfoCreateOrConnectWithoutPersonInput>
    createMany?: PersonalInfoCreateManyPersonInputEnvelope
    connect?: Enumerable<PersonalInfoWhereUniqueInput>
  }

  export type DistinctiveFeaturesUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<Enumerable<DistinctiveFeaturesCreateWithoutPersonInput>, Enumerable<DistinctiveFeaturesUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<DistinctiveFeaturesCreateOrConnectWithoutPersonInput>
    createMany?: DistinctiveFeaturesCreateManyPersonInputEnvelope
    connect?: Enumerable<DistinctiveFeaturesWhereUniqueInput>
  }

  export type OrganizationUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<Enumerable<OrganizationCreateWithoutPersonInput>, Enumerable<OrganizationUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutPersonInput>
    createMany?: OrganizationCreateManyPersonInputEnvelope
    connect?: Enumerable<OrganizationWhereUniqueInput>
  }

  export type PersonalInfoUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<Enumerable<PersonalInfoCreateWithoutPersonInput>, Enumerable<PersonalInfoUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<PersonalInfoCreateOrConnectWithoutPersonInput>
    createMany?: PersonalInfoCreateManyPersonInputEnvelope
    connect?: Enumerable<PersonalInfoWhereUniqueInput>
  }

  export type DistinctiveFeaturesUpdateManyWithoutPersonInput = {
    create?: XOR<Enumerable<DistinctiveFeaturesCreateWithoutPersonInput>, Enumerable<DistinctiveFeaturesUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<DistinctiveFeaturesCreateOrConnectWithoutPersonInput>
    upsert?: Enumerable<DistinctiveFeaturesUpsertWithWhereUniqueWithoutPersonInput>
    createMany?: DistinctiveFeaturesCreateManyPersonInputEnvelope
    connect?: Enumerable<DistinctiveFeaturesWhereUniqueInput>
    set?: Enumerable<DistinctiveFeaturesWhereUniqueInput>
    disconnect?: Enumerable<DistinctiveFeaturesWhereUniqueInput>
    delete?: Enumerable<DistinctiveFeaturesWhereUniqueInput>
    update?: Enumerable<DistinctiveFeaturesUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<DistinctiveFeaturesUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<DistinctiveFeaturesScalarWhereInput>
  }

  export type OrganizationUpdateManyWithoutPersonInput = {
    create?: XOR<Enumerable<OrganizationCreateWithoutPersonInput>, Enumerable<OrganizationUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutPersonInput>
    upsert?: Enumerable<OrganizationUpsertWithWhereUniqueWithoutPersonInput>
    createMany?: OrganizationCreateManyPersonInputEnvelope
    connect?: Enumerable<OrganizationWhereUniqueInput>
    set?: Enumerable<OrganizationWhereUniqueInput>
    disconnect?: Enumerable<OrganizationWhereUniqueInput>
    delete?: Enumerable<OrganizationWhereUniqueInput>
    update?: Enumerable<OrganizationUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<OrganizationUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<OrganizationScalarWhereInput>
  }

  export type PersonalInfoUpdateManyWithoutPersonInput = {
    create?: XOR<Enumerable<PersonalInfoCreateWithoutPersonInput>, Enumerable<PersonalInfoUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<PersonalInfoCreateOrConnectWithoutPersonInput>
    upsert?: Enumerable<PersonalInfoUpsertWithWhereUniqueWithoutPersonInput>
    createMany?: PersonalInfoCreateManyPersonInputEnvelope
    connect?: Enumerable<PersonalInfoWhereUniqueInput>
    set?: Enumerable<PersonalInfoWhereUniqueInput>
    disconnect?: Enumerable<PersonalInfoWhereUniqueInput>
    delete?: Enumerable<PersonalInfoWhereUniqueInput>
    update?: Enumerable<PersonalInfoUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<PersonalInfoUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<PersonalInfoScalarWhereInput>
  }

  export type DistinctiveFeaturesUncheckedUpdateManyWithoutPersonInput = {
    create?: XOR<Enumerable<DistinctiveFeaturesCreateWithoutPersonInput>, Enumerable<DistinctiveFeaturesUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<DistinctiveFeaturesCreateOrConnectWithoutPersonInput>
    upsert?: Enumerable<DistinctiveFeaturesUpsertWithWhereUniqueWithoutPersonInput>
    createMany?: DistinctiveFeaturesCreateManyPersonInputEnvelope
    connect?: Enumerable<DistinctiveFeaturesWhereUniqueInput>
    set?: Enumerable<DistinctiveFeaturesWhereUniqueInput>
    disconnect?: Enumerable<DistinctiveFeaturesWhereUniqueInput>
    delete?: Enumerable<DistinctiveFeaturesWhereUniqueInput>
    update?: Enumerable<DistinctiveFeaturesUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<DistinctiveFeaturesUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<DistinctiveFeaturesScalarWhereInput>
  }

  export type OrganizationUncheckedUpdateManyWithoutPersonInput = {
    create?: XOR<Enumerable<OrganizationCreateWithoutPersonInput>, Enumerable<OrganizationUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutPersonInput>
    upsert?: Enumerable<OrganizationUpsertWithWhereUniqueWithoutPersonInput>
    createMany?: OrganizationCreateManyPersonInputEnvelope
    connect?: Enumerable<OrganizationWhereUniqueInput>
    set?: Enumerable<OrganizationWhereUniqueInput>
    disconnect?: Enumerable<OrganizationWhereUniqueInput>
    delete?: Enumerable<OrganizationWhereUniqueInput>
    update?: Enumerable<OrganizationUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<OrganizationUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<OrganizationScalarWhereInput>
  }

  export type PersonalInfoUncheckedUpdateManyWithoutPersonInput = {
    create?: XOR<Enumerable<PersonalInfoCreateWithoutPersonInput>, Enumerable<PersonalInfoUncheckedCreateWithoutPersonInput>>
    connectOrCreate?: Enumerable<PersonalInfoCreateOrConnectWithoutPersonInput>
    upsert?: Enumerable<PersonalInfoUpsertWithWhereUniqueWithoutPersonInput>
    createMany?: PersonalInfoCreateManyPersonInputEnvelope
    connect?: Enumerable<PersonalInfoWhereUniqueInput>
    set?: Enumerable<PersonalInfoWhereUniqueInput>
    disconnect?: Enumerable<PersonalInfoWhereUniqueInput>
    delete?: Enumerable<PersonalInfoWhereUniqueInput>
    update?: Enumerable<PersonalInfoUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<PersonalInfoUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<PersonalInfoScalarWhereInput>
  }

  export type DianonPersonCreateNestedOneWithoutOrganizationInput = {
    create?: XOR<DianonPersonCreateWithoutOrganizationInput, DianonPersonUncheckedCreateWithoutOrganizationInput>
    connectOrCreate?: DianonPersonCreateOrConnectWithoutOrganizationInput
    connect?: DianonPersonWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DianonPersonUpdateOneRequiredWithoutOrganizationInput = {
    create?: XOR<DianonPersonCreateWithoutOrganizationInput, DianonPersonUncheckedCreateWithoutOrganizationInput>
    connectOrCreate?: DianonPersonCreateOrConnectWithoutOrganizationInput
    upsert?: DianonPersonUpsertWithoutOrganizationInput
    connect?: DianonPersonWhereUniqueInput
    update?: XOR<DianonPersonUpdateWithoutOrganizationInput, DianonPersonUncheckedUpdateWithoutOrganizationInput>
  }

  export type DianonPersonCreateNestedOneWithoutDistinctiveFeaturesInput = {
    create?: XOR<DianonPersonCreateWithoutDistinctiveFeaturesInput, DianonPersonUncheckedCreateWithoutDistinctiveFeaturesInput>
    connectOrCreate?: DianonPersonCreateOrConnectWithoutDistinctiveFeaturesInput
    connect?: DianonPersonWhereUniqueInput
  }

  export type DianonPersonUpdateOneRequiredWithoutDistinctiveFeaturesInput = {
    create?: XOR<DianonPersonCreateWithoutDistinctiveFeaturesInput, DianonPersonUncheckedCreateWithoutDistinctiveFeaturesInput>
    connectOrCreate?: DianonPersonCreateOrConnectWithoutDistinctiveFeaturesInput
    upsert?: DianonPersonUpsertWithoutDistinctiveFeaturesInput
    connect?: DianonPersonWhereUniqueInput
    update?: XOR<DianonPersonUpdateWithoutDistinctiveFeaturesInput, DianonPersonUncheckedUpdateWithoutDistinctiveFeaturesInput>
  }

  export type DianonPersonCreateNestedOneWithoutPersonalInfoInput = {
    create?: XOR<DianonPersonCreateWithoutPersonalInfoInput, DianonPersonUncheckedCreateWithoutPersonalInfoInput>
    connectOrCreate?: DianonPersonCreateOrConnectWithoutPersonalInfoInput
    connect?: DianonPersonWhereUniqueInput
  }

  export type DianonPersonUpdateOneRequiredWithoutPersonalInfoInput = {
    create?: XOR<DianonPersonCreateWithoutPersonalInfoInput, DianonPersonUncheckedCreateWithoutPersonalInfoInput>
    connectOrCreate?: DianonPersonCreateOrConnectWithoutPersonalInfoInput
    upsert?: DianonPersonUpsertWithoutPersonalInfoInput
    connect?: DianonPersonWhereUniqueInput
    update?: XOR<DianonPersonUpdateWithoutPersonalInfoInput, DianonPersonUncheckedUpdateWithoutPersonalInfoInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumTokenTypeFilter = {
    equals?: TokenType
    in?: Enumerable<TokenType>
    notIn?: Enumerable<TokenType>
    not?: NestedEnumTokenTypeFilter | TokenType
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type NestedEnumTokenTypeWithAggregatesFilter = {
    equals?: TokenType
    in?: Enumerable<TokenType>
    notIn?: Enumerable<TokenType>
    not?: NestedEnumTokenTypeWithAggregatesFilter | TokenType
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedEnumTokenTypeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedEnumTokenTypeFilter
    _max?: NestedEnumTokenTypeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedEnumTokenTypeFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | null
    not?: InputJsonValue | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type TokenCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    type_token: TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
  }

  export type TokenUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    type_token: TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
  }

  export type TokenCreateOrConnectWithoutUserInput = {
    where: TokenWhereUniqueInput
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenCreateManyUserInputEnvelope = {
    data: Enumerable<TokenCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TokenUpsertWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    update: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenUpdateWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    data: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
  }

  export type TokenUpdateManyWithWhereWithoutUserInput = {
    where: TokenScalarWhereInput
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyWithoutTokensInput>
  }

  export type TokenScalarWhereInput = {
    AND?: Enumerable<TokenScalarWhereInput>
    OR?: Enumerable<TokenScalarWhereInput>
    NOT?: Enumerable<TokenScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    type_token?: EnumTokenTypeFilter | TokenType
    emailToken?: StringNullableFilter | string | null
    valid?: BoolFilter | boolean
    expiration?: DateTimeFilter | Date | string
    userId?: IntFilter | number
  }

  export type UserCreateWithoutTokensInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    isAdmin?: boolean
  }

  export type UserUncheckedCreateWithoutTokensInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    isAdmin?: boolean
  }

  export type UserCreateOrConnectWithoutTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
  }

  export type UserUpsertWithoutTokensInput = {
    update: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
  }

  export type UserUpdateWithoutTokensInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DistinctiveFeaturesCreateWithoutPersonInput = {
    tato?: string | null
    colour?: string | null
    sex: string
    injury?: string | null
  }

  export type DistinctiveFeaturesUncheckedCreateWithoutPersonInput = {
    id?: number
    tato?: string | null
    colour?: string | null
    sex: string
    injury?: string | null
  }

  export type DistinctiveFeaturesCreateOrConnectWithoutPersonInput = {
    where: DistinctiveFeaturesWhereUniqueInput
    create: XOR<DistinctiveFeaturesCreateWithoutPersonInput, DistinctiveFeaturesUncheckedCreateWithoutPersonInput>
  }

  export type DistinctiveFeaturesCreateManyPersonInputEnvelope = {
    data: Enumerable<DistinctiveFeaturesCreateManyPersonInput>
    skipDuplicates?: boolean
  }

  export type OrganizationCreateWithoutPersonInput = {
    name: string
    rank?: string | null
    date?: Date | string | null
    firstName?: string | null
    lastName?: string | null
  }

  export type OrganizationUncheckedCreateWithoutPersonInput = {
    id?: number
    name: string
    rank?: string | null
    date?: Date | string | null
    firstName?: string | null
    lastName?: string | null
  }

  export type OrganizationCreateOrConnectWithoutPersonInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutPersonInput, OrganizationUncheckedCreateWithoutPersonInput>
  }

  export type OrganizationCreateManyPersonInputEnvelope = {
    data: Enumerable<OrganizationCreateManyPersonInput>
    skipDuplicates?: boolean
  }

  export type PersonalInfoCreateWithoutPersonInput = {
    passport?: string | null
    marital?: string | null
    children?: string | null
    adress?: string | null
    register?: string | null
    telephone: string
  }

  export type PersonalInfoUncheckedCreateWithoutPersonInput = {
    id?: number
    passport?: string | null
    marital?: string | null
    children?: string | null
    adress?: string | null
    register?: string | null
    telephone: string
  }

  export type PersonalInfoCreateOrConnectWithoutPersonInput = {
    where: PersonalInfoWhereUniqueInput
    create: XOR<PersonalInfoCreateWithoutPersonInput, PersonalInfoUncheckedCreateWithoutPersonInput>
  }

  export type PersonalInfoCreateManyPersonInputEnvelope = {
    data: Enumerable<PersonalInfoCreateManyPersonInput>
    skipDuplicates?: boolean
  }

  export type DistinctiveFeaturesUpsertWithWhereUniqueWithoutPersonInput = {
    where: DistinctiveFeaturesWhereUniqueInput
    update: XOR<DistinctiveFeaturesUpdateWithoutPersonInput, DistinctiveFeaturesUncheckedUpdateWithoutPersonInput>
    create: XOR<DistinctiveFeaturesCreateWithoutPersonInput, DistinctiveFeaturesUncheckedCreateWithoutPersonInput>
  }

  export type DistinctiveFeaturesUpdateWithWhereUniqueWithoutPersonInput = {
    where: DistinctiveFeaturesWhereUniqueInput
    data: XOR<DistinctiveFeaturesUpdateWithoutPersonInput, DistinctiveFeaturesUncheckedUpdateWithoutPersonInput>
  }

  export type DistinctiveFeaturesUpdateManyWithWhereWithoutPersonInput = {
    where: DistinctiveFeaturesScalarWhereInput
    data: XOR<DistinctiveFeaturesUpdateManyMutationInput, DistinctiveFeaturesUncheckedUpdateManyWithoutDistinctiveFeaturesInput>
  }

  export type DistinctiveFeaturesScalarWhereInput = {
    AND?: Enumerable<DistinctiveFeaturesScalarWhereInput>
    OR?: Enumerable<DistinctiveFeaturesScalarWhereInput>
    NOT?: Enumerable<DistinctiveFeaturesScalarWhereInput>
    id?: IntFilter | number
    personId?: IntFilter | number
    tato?: StringNullableFilter | string | null
    colour?: StringNullableFilter | string | null
    sex?: StringFilter | string
    injury?: StringNullableFilter | string | null
  }

  export type OrganizationUpsertWithWhereUniqueWithoutPersonInput = {
    where: OrganizationWhereUniqueInput
    update: XOR<OrganizationUpdateWithoutPersonInput, OrganizationUncheckedUpdateWithoutPersonInput>
    create: XOR<OrganizationCreateWithoutPersonInput, OrganizationUncheckedCreateWithoutPersonInput>
  }

  export type OrganizationUpdateWithWhereUniqueWithoutPersonInput = {
    where: OrganizationWhereUniqueInput
    data: XOR<OrganizationUpdateWithoutPersonInput, OrganizationUncheckedUpdateWithoutPersonInput>
  }

  export type OrganizationUpdateManyWithWhereWithoutPersonInput = {
    where: OrganizationScalarWhereInput
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type OrganizationScalarWhereInput = {
    AND?: Enumerable<OrganizationScalarWhereInput>
    OR?: Enumerable<OrganizationScalarWhereInput>
    NOT?: Enumerable<OrganizationScalarWhereInput>
    id?: IntFilter | number
    personID?: IntFilter | number
    name?: StringFilter | string
    rank?: StringNullableFilter | string | null
    date?: DateTimeNullableFilter | Date | string | null
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
  }

  export type PersonalInfoUpsertWithWhereUniqueWithoutPersonInput = {
    where: PersonalInfoWhereUniqueInput
    update: XOR<PersonalInfoUpdateWithoutPersonInput, PersonalInfoUncheckedUpdateWithoutPersonInput>
    create: XOR<PersonalInfoCreateWithoutPersonInput, PersonalInfoUncheckedCreateWithoutPersonInput>
  }

  export type PersonalInfoUpdateWithWhereUniqueWithoutPersonInput = {
    where: PersonalInfoWhereUniqueInput
    data: XOR<PersonalInfoUpdateWithoutPersonInput, PersonalInfoUncheckedUpdateWithoutPersonInput>
  }

  export type PersonalInfoUpdateManyWithWhereWithoutPersonInput = {
    where: PersonalInfoScalarWhereInput
    data: XOR<PersonalInfoUpdateManyMutationInput, PersonalInfoUncheckedUpdateManyWithoutPersonalInfoInput>
  }

  export type PersonalInfoScalarWhereInput = {
    AND?: Enumerable<PersonalInfoScalarWhereInput>
    OR?: Enumerable<PersonalInfoScalarWhereInput>
    NOT?: Enumerable<PersonalInfoScalarWhereInput>
    id?: IntFilter | number
    personId?: IntFilter | number
    passport?: StringNullableFilter | string | null
    marital?: StringNullableFilter | string | null
    children?: StringNullableFilter | string | null
    adress?: StringNullableFilter | string | null
    register?: StringNullableFilter | string | null
    telephone?: StringFilter | string
  }

  export type DianonPersonCreateWithoutOrganizationInput = {
    email?: string | null
    firstName: string
    lastName: string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesCreateNestedManyWithoutPersonInput
    personalInfo?: PersonalInfoCreateNestedManyWithoutPersonInput
  }

  export type DianonPersonUncheckedCreateWithoutOrganizationInput = {
    id?: number
    email?: string | null
    firstName: string
    lastName: string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesUncheckedCreateNestedManyWithoutPersonInput
    personalInfo?: PersonalInfoUncheckedCreateNestedManyWithoutPersonInput
  }

  export type DianonPersonCreateOrConnectWithoutOrganizationInput = {
    where: DianonPersonWhereUniqueInput
    create: XOR<DianonPersonCreateWithoutOrganizationInput, DianonPersonUncheckedCreateWithoutOrganizationInput>
  }

  export type DianonPersonUpsertWithoutOrganizationInput = {
    update: XOR<DianonPersonUpdateWithoutOrganizationInput, DianonPersonUncheckedUpdateWithoutOrganizationInput>
    create: XOR<DianonPersonCreateWithoutOrganizationInput, DianonPersonUncheckedCreateWithoutOrganizationInput>
  }

  export type DianonPersonUpdateWithoutOrganizationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesUpdateManyWithoutPersonInput
    personalInfo?: PersonalInfoUpdateManyWithoutPersonInput
  }

  export type DianonPersonUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesUncheckedUpdateManyWithoutPersonInput
    personalInfo?: PersonalInfoUncheckedUpdateManyWithoutPersonInput
  }

  export type DianonPersonCreateWithoutDistinctiveFeaturesInput = {
    email?: string | null
    firstName: string
    lastName: string
    social?: InputJsonValue | null
    organization?: OrganizationCreateNestedManyWithoutPersonInput
    personalInfo?: PersonalInfoCreateNestedManyWithoutPersonInput
  }

  export type DianonPersonUncheckedCreateWithoutDistinctiveFeaturesInput = {
    id?: number
    email?: string | null
    firstName: string
    lastName: string
    social?: InputJsonValue | null
    organization?: OrganizationUncheckedCreateNestedManyWithoutPersonInput
    personalInfo?: PersonalInfoUncheckedCreateNestedManyWithoutPersonInput
  }

  export type DianonPersonCreateOrConnectWithoutDistinctiveFeaturesInput = {
    where: DianonPersonWhereUniqueInput
    create: XOR<DianonPersonCreateWithoutDistinctiveFeaturesInput, DianonPersonUncheckedCreateWithoutDistinctiveFeaturesInput>
  }

  export type DianonPersonUpsertWithoutDistinctiveFeaturesInput = {
    update: XOR<DianonPersonUpdateWithoutDistinctiveFeaturesInput, DianonPersonUncheckedUpdateWithoutDistinctiveFeaturesInput>
    create: XOR<DianonPersonCreateWithoutDistinctiveFeaturesInput, DianonPersonUncheckedCreateWithoutDistinctiveFeaturesInput>
  }

  export type DianonPersonUpdateWithoutDistinctiveFeaturesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    social?: InputJsonValue | null
    organization?: OrganizationUpdateManyWithoutPersonInput
    personalInfo?: PersonalInfoUpdateManyWithoutPersonInput
  }

  export type DianonPersonUncheckedUpdateWithoutDistinctiveFeaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    social?: InputJsonValue | null
    organization?: OrganizationUncheckedUpdateManyWithoutPersonInput
    personalInfo?: PersonalInfoUncheckedUpdateManyWithoutPersonInput
  }

  export type DianonPersonCreateWithoutPersonalInfoInput = {
    email?: string | null
    firstName: string
    lastName: string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesCreateNestedManyWithoutPersonInput
    organization?: OrganizationCreateNestedManyWithoutPersonInput
  }

  export type DianonPersonUncheckedCreateWithoutPersonalInfoInput = {
    id?: number
    email?: string | null
    firstName: string
    lastName: string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesUncheckedCreateNestedManyWithoutPersonInput
    organization?: OrganizationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type DianonPersonCreateOrConnectWithoutPersonalInfoInput = {
    where: DianonPersonWhereUniqueInput
    create: XOR<DianonPersonCreateWithoutPersonalInfoInput, DianonPersonUncheckedCreateWithoutPersonalInfoInput>
  }

  export type DianonPersonUpsertWithoutPersonalInfoInput = {
    update: XOR<DianonPersonUpdateWithoutPersonalInfoInput, DianonPersonUncheckedUpdateWithoutPersonalInfoInput>
    create: XOR<DianonPersonCreateWithoutPersonalInfoInput, DianonPersonUncheckedCreateWithoutPersonalInfoInput>
  }

  export type DianonPersonUpdateWithoutPersonalInfoInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesUpdateManyWithoutPersonInput
    organization?: OrganizationUpdateManyWithoutPersonInput
  }

  export type DianonPersonUncheckedUpdateWithoutPersonalInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    social?: InputJsonValue | null
    distinctiveFeatures?: DistinctiveFeaturesUncheckedUpdateManyWithoutPersonInput
    organization?: OrganizationUncheckedUpdateManyWithoutPersonInput
  }

  export type TokenCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    type_token: TokenType
    emailToken?: string | null
    valid?: boolean
    expiration: Date | string
  }

  export type TokenUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type_token?: EnumTokenTypeFieldUpdateOperationsInput | TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type_token?: EnumTokenTypeFieldUpdateOperationsInput | TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type_token?: EnumTokenTypeFieldUpdateOperationsInput | TokenType
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    valid?: BoolFieldUpdateOperationsInput | boolean
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistinctiveFeaturesCreateManyPersonInput = {
    id?: number
    tato?: string | null
    colour?: string | null
    sex: string
    injury?: string | null
  }

  export type OrganizationCreateManyPersonInput = {
    id?: number
    name: string
    rank?: string | null
    date?: Date | string | null
    firstName?: string | null
    lastName?: string | null
  }

  export type PersonalInfoCreateManyPersonInput = {
    id?: number
    passport?: string | null
    marital?: string | null
    children?: string | null
    adress?: string | null
    register?: string | null
    telephone: string
  }

  export type DistinctiveFeaturesUpdateWithoutPersonInput = {
    tato?: NullableStringFieldUpdateOperationsInput | string | null
    colour?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    injury?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistinctiveFeaturesUncheckedUpdateWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    tato?: NullableStringFieldUpdateOperationsInput | string | null
    colour?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    injury?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistinctiveFeaturesUncheckedUpdateManyWithoutDistinctiveFeaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tato?: NullableStringFieldUpdateOperationsInput | string | null
    colour?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    injury?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationUpdateWithoutPersonInput = {
    name?: StringFieldUpdateOperationsInput | string
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationUncheckedUpdateWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonalInfoUpdateWithoutPersonInput = {
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    marital?: NullableStringFieldUpdateOperationsInput | string | null
    children?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    register?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalInfoUncheckedUpdateWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    marital?: NullableStringFieldUpdateOperationsInput | string | null
    children?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    register?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
  }

  export type PersonalInfoUncheckedUpdateManyWithoutPersonalInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    passport?: NullableStringFieldUpdateOperationsInput | string | null
    marital?: NullableStringFieldUpdateOperationsInput | string | null
    children?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    register?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}